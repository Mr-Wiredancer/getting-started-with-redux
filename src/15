In the previous lesson we learned how to use the reducer composition pattern to let different reducers handle different parts of the state tree, and then combine their results.

In fact this pattern is so common that it's present in most Redux applications. And this is why Redux provides a function called "combineReducers" that lets you avoid writing this code by hand. And instead, it generates the top level reducer for you.

The only argument to "combineReducers" is an object. And this object lets me specify the mapping between the state field names, and the reducers managing them. The return value of the "combineReducers"'s call is a reducer function, which is pretty much equivalent to the reducer function I wrote by hand previously.

The keys of the object I configure combined reducers with correspond to the fields of the state object is going to manage. The values of the object I passed to "combineReducers", are the reducers you should call to update the corresponding state fields.

This "combineReducers" call says that the "todos" field inside the state object managers will be updated by the "todos" reducer, and the "visibilityFilter" field inside the state object will be updated by calling the "visibilityFilter" reducer. And the results will be assembled into a single object. In other words, it behaves pretty much exactly as the function commented down below.

Finally, I will establish a useful convention. I will always name my reducers after the state keys they manage. Since the key names and the value names are now the same, I can omit the values thanks to the ES6 object literal shorthand notation.

In this lesson, you learned how to generate a simple reducer that calls many reducers to manage parts of its state by using the "combineReducers" utility function.
