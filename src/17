In the previous lessons, we learned how to split the root reducers into many smaller reducers that manage parts of the state tree.

And now we have a ready "todoApp" reducer that handles all the actions of our simple ToDo application. So now it's time to implement the view layer. And I'm going to use React in this example.

I'm adding react and redact-dom packages from the Facebook CDN. I'm also adding a div with ID "root", which is where I'm going to render my react application.

imilar to the React counter example from the eighth lesson, I declare a "render" function that is going to update DOM in response to the current application state. And I'm going to subscribe to the store changes and call "render" whenever the store changes, and once to render the initial state.

And the implementation of the render method is going to use react, so it will call "ReactDom.render" for some "TodoApp" component I haven't written yet. And it renders it into the div I created inside the HTML. So it's the div with ID called "root".

React provides a base class for all components. So I'm grabbing from the react object called "reactComponent". And I'm declaring my own "TooApp" component that extends the react base component. This component is only going to have a "render" function and is going to return a "div". And inside the "div", I'm going to place a botton saying "Add Todo".

But I don't want to add an input field yet to keep the example simple at first. So I'm dispatching the "ADD_TODO"  action, and I'm going to put a test as my checks for the action. So It's going to keep adding todos with the text "Test".

And, The ID, I need to specify a sequential ID. So This is why I'm declaring a global variable called "nextTodoId", and I'm going to keep incrementing it. So, every time, it's going to emit a new id.

And finally, I also want to display a list of the todos. So assuming that I have the todos injected as a "todos" prop, I'll call map and for every todo item, I'm going to show a list item showing the text of that particular todo.

Finally, because I need to the "todos" as a prop, I'm going to pass it to the TodoApp by reading the current store state and written its "todos" field.

You can see that there is a button "Add Todo" and anytime I press it, I see a new ToDo with a text "Test". Now I'm going to add an "input" inside my "render" function, and I'm using the react callback "ref" API where "ref" is a function, it gets the node corresponding to the "ref", and I'm saving that node with some name, in this case, "this.input".

So I'm able to read the value of the input inside my event handler. I'm reading "this.input.value". And I'm also able to reset the value after dispatching the action so that the field is cleared. Now if I try to write something to fill and press "Add Todo", the "ADD_TODO" action is dispatched and the field is cleared.

Let's take a moment to recap how this application works. It starts with a "TodoApp" react component. This component is not aware of how exactly todos are being added. However, it can express its desire to mutate the state by dispatching an action with the type "ADD_TODO".

For the text field, it uses the current input value and it passes an incrementing ID as the ID of todo. Every todo needs its own ID, and in this approach, we're just going to increment the counter, so it always gives us the next integer as ID.

It is common for react components to dispatch actions in Redux apps. However, it is equally important to be able to render the current state. My "TodoApp" component assumes that it's going to receive todos as a prop, and it maps over the todos to display a list of them using the ID as a key.

This component is being rendered in the "render" function that runs any time the store state changes and initially. The render function reads the current state of the store and passes the " todos" array that it gets from the current state of this store to the "TodoApp" component as a prop.

The "render" function is called on every store change so the "todos" prop is always up to date. This was the rendering part of the redux flow. Let's recap how mutations work in Redux.

Any state change is caused by a "store.dispatch" call somewhere in the component. When an action is dispatched, the store calls the reducer it was created with, with the current state and the action being dispatched.

And in our case, this is the "todoApp" reducer, which we obtained by combining "visibilityFilter" and "ToDos" reducer.

It matches the action type and the switch statement. And if the action type is "ADD_TODO", and indeed, it is equal to "ADD_TODO" string. In this case, it will call the child "todo" reducer, passing it undefined, because there is no state for a new todo that it can pass, and the action.

And we have a similar switch statement inside the "todo" reducer and the action type is "ADD_TODO". So It returns the initial state of the todo with the ID and text from the action and the "completed" field set to false.

The "todos" reducer that called it was returned a new array with all existent items and the new item added at the very end. So it adds a need todo to the current state.

Finally, the combined producer called "todoApp" will use this new array as the new value for the "todos" field in the global state object. It's going to return a new state object where the "todos" field corresponds to the array with the newly added todo item.

The "todoApp" reducer is the root reducer in this application. It is the one the store was created with. So its next state is a next state of the Redux store, and all the listeners are notified.

The "render" function is subscribed to the store changes so it is called again, and it gets the fresh state by calling "getState" and it passes the fresh todos to the component, re-rendering it with the new data .
