In the previous lesson, we got rid of the top-level store variable and instead started passing the store as a prop to the "TodoApp" component. So every component below receives the store as a prop. And we even have to do this for presentational components because sometimes they contain container components that need the store to subscribe to the changes.

We have to write a lot of boiler plate code to pass the store down as a prop. But there is another way, using the advanced React feature called "Context".

I'm creating a new component called "Provider". And from its "render" method, it just returns whatever its child is. So we can wrap any component in a "Provider", and it's going to render that component.

I'm changing the "render" call to render a "TodoApp" inside the "Provider". And I'm moving the "store" prop from the "TodoApp" to the "Provider" component. The "Provider" component will use the React advanced Context feature to make the store available to any component inside it, including grandchildren.

To do this, it has to define a special method called "getChildContext" that will be called by React by using this prop "store" which corresponds to the "store" that is passed to the "Provider" as a prop just once.

The store will be part of the context that the "Provider" specifies for any its children and grandchildren. So the "TodoApp" is going to receive this context, and any component inside "TodoApp" is also going to receive this context object with the store inside it.

However, there is an important condition for the context to work. And this condition is that you have to specify "childContextTypes" on the component that defines "getChildContext". These are just React prop types definition, but unlike prop types, the "childContextTypes" are essential for the context to be turned on. If you don't specify them, no child components will receive this context.

The container components currently access store by props, but we're going to change this to read the store from React context. And to do that, we just wrap it to "this.context". Similarly, in the "render" method, I'm also going to read the store from the context instead of the props.

Finally, the context is opt-in for the receiving components, too. So you have to specify a special field called "contextTypes", which are similar to "childContextTypes". But, in this case, we are specifying which context we want to receive and not pass down. If you forget to declare the "contextTypes", the component will not receive the relevant context, so it is essential to remember to declare them.

What about the functional components that don't have "this"? It turns out that they also receive the context but as a second argument after the props. So I'm destructuring the second argument and getting the store from there. And the second argument is the context.

Just like with the class components, I still have to add a property called, "contextTypes" that specifies which context I want to receive. And in this case, I want to receive the store from the "Provider". If I forget to declare the "contextTypes", my functional component will not receive the relevant context as a second argument. So it's important to remember to declare them any time you use the context.

Finally, I'm replacing the props with the context when getting the store for the "FilterLink". And I'm adding the "contextTypes" declaration to the "FilterLink" so it receives the relevant context from the "Provider".

Now that the "FilterLink" receives the store by context, I no longer need to pass it as a prop, so I'm removing its usage. And I'm also removing the "store" prop from the "Footer" because it doesn't need to pass it down anymore. I'm also removing the "store" prop from the "TodoApp" component because I no longer need to pass it down to the containers.

Now, instead of explicitly passing the store down by props, we pass it implicitly by context.

Let's recap how we use the context to pass the store down. We start by rendering the "TodoApp" inside the "Provider" component we defined above. The "Provider" component just renders whatever you pass through it. So in this case, it renders its children or the "TodoApp" component. However, it also provides the context to any components inside it including grandchildren.

The context contains just one key called the "store". And it corresponds to the "store" we passed as a prop to the "Provider" component.

We pass the "store" to the "Provider" component in our render code and make it available to child components by defining the "getChildContext" with the "store" key pointing to that prop.

It is essential that the "getChildContext" is matched by "childContextTypes" where we specify that the "store" key has prop type of "Object". Note that the "childContextTypes" definition is absolutely required if you want to pass the context down the tree.

The benefit is that we don't need to pass the store through the intermediate components. And instead, we can declare the "contextTypes" on the container components that need access to the store so that they can retrieve it from the context instead of retrieving it from the props.

The context creates something like a wormhole between the "VisibleTodoList" component that reads the context and the "Provider" that provides the context. And this wormhole is only enabled because the "contextTypes" declared on the "VisibleTodoList" include the "store" that is defined in "childContextTypes" of the "Provider" component.

The "AddTodo" is another component that needs access to the store. So it also opts-in to receiving it in the context by specifying the "contextTypes". This is why, in addition to props, it receives a second argument, which is the context. I'm using the destruction syntax to grab the store from the context here.

The context works at any depth, so it is not necessary to put "contextTypes" on the footer. The "FilterLink" is the component that directly uses the context, so this is the component that has to specify the "contextTypes" so that it can use the store by reading it from the context.

Context is a powerful feature, but in a way it contradicts the React philosophy of the explicit data flow. The context essentially allows global variables across the component tree. But global variables are usually a bad idea. And unless you're using it for dependency injection, like here when we need to make a single object available to all components, then probably you shouldn't use context.

Finally, the context API is not stable in React. It has changed before, and it is likely to change again. So try your best not to rely on it too much.
