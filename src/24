In the previous lessons, we used this store top-level variable to refer to the Redux store. The components that access the store, such as the container components, read the state from it, subscribe to the store, and dispatch actions on the store using this store top-level variable.

This approach works fine for JSbin example where everything is in a single file. However, it doesn't scale to real applications for several reasons.

First of all, it makes your container components harder to test because they reference a specific store, but you might want to supply a different mock store in the test. Secondly, it makes it very hard to implement universal replications that are rendered on the server, because on the server, you want to supply a different store instance for every request because different requests have different data.

I'm going to start by moving the store creation code to the bottom of the file where I render my React components. I'm going to change it slightly. And instead of creating the store top-level variable, I will pass the store I create as a prop to the top-level component, so it is completely injectable into it.

Every container component needs a reference to the store so unfortunately, we have to pass it down to every component as a prop. It's less effort than passing different data through every component, but it's still inconvenient. So, don't worry, we'll find a better solution later, but for now, we need to see the problem.

The problem is that the container components need to have the store instance to get the state from it, dispatch actions and subscribe to the changes. So this time, I'm changing the container component to take the store from the props using the ES6 destruction syntax, which just means "store equals props.store."

And I'm doing the same here. I'm just taking the store from the props so I can call "dispatch" on it.

I need to make similar changes to other container components. And in this case, I have this "AddTodo" component, which is not exactly a container component, but it still needs the store to dispatch the "ADD_TODO" action, so I added it as a prop. And I'm also going to add the store to the "Footer" component because, unfortunately, "FilterLink" needs it.

And the "Footer" component renders "FilterLink". This is not convenient, but as I said, we'll figure out a way to avoid this later. But for now, we need to pass the store down so that every container component, such as "FilterLink", can use it to subscribe to the changes, to read the state and to dispatch actions without relying on a top-level variable being available.

I'm changing the "render" method to read the store from the props. And now, all containers read the store instance from the props, and don't rely on a top-level variable that I removed.

Note that this change did not change the behavior or the data flow of this application. The container components subscribe to the store, just like before, and update their states in response to its changes.

However, what changed is how they access the store. Previously, they would access a top-level variable, but this approach does not scale to real-world applications. And this is why, right now, I'm passing down the store as a prop, so the container components can subscribe to it.

In the future lessons, we will see how to pass the store down to the container components implicitly but without introducing the top-level variable.
