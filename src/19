In the previous two lessons, we were working on creating the user interface for the todo list application that displays the todos, lets us add new todos, and toggle them on click. We implemented that by dispatching "ADD_TODO" and "TOGGLE_TODO" actions that we already know how to handle in our reducers.

In this lesson, we're going to dispatch "SET_VISIBILITY_FILTER" action and use the "visibilityFilter" field to only show the todos the user wants to see -- either the completed todos, active todos, or all todos in the current state.

I'm starting by creating a new functional component called, "FilterLink" that the user needs to click to switch the current visible todos. And "FilterLink" accepts the filter prop, which is just a string, and the children, which is the contents of the link. And it's going to be a simple "<a>" tag that doesn't really link anywhere. It's going to prevent the navigation when clicked.

It's going to dispatch an action, the type, "SET_VISIBILITY_FILTER", and pass in the filter prop so that the reducer knows which filter is being clicked. I will pass the children down to the "<a>" tag, so the consumer can specify the text of the link. Now I can use it in my "TodoApp" component.

Just below the todo list, I am adding a paragraph where I'm going to offer the user the choice as to which todos should be currently visible by using the "FilterLink" component I just created.

The filter prop is one of the three possible values, such as "SHOW_ALL", which corresponds to showing every todo in the state, "SHOW_ACTIVE", which means just show the todos that are not completed yet, and "SHOW_COMPLETED", which means show the completed todos. So I'm copy-pasting the "FilterLink", and I'm changing the labels and the filters corresponding to it.

Running this code will give me three different things under the list of todos. Clicking on them will change the state visibility filter field. However, it doesn't have any effect yet because we don't interpret the value of the visibility filter.

I am creating a new function that is going to help me filter the todos according to the filter value. So it's called, "getVisibleTodos", It accepts two arguments, the todos and the filter. It switches on the current filter value.

If the filter is "SHOW_ALL", it's going to return all of the todos. But if the filter is "SHOW_COMPLETED", it's going to call "todos.filter()", that is array "filter" method, to only return those todos that have "completed" set to true. "SHOW_ACTIVE" is going to the opposite of that. It's going to return only those todos where a "completed" field is false.

Now I need to call this function to filter the todos before rendering them. In the "render" function of the "TodoApp" component, I get the visible todos by calling "getVisibleTodos" with the "todos" and the "visibilityFilter" values from my props. And I'm going to use the "visibleTodos" instead of these props "todos" when I enumerate them for rendering.

Finally, I now use the "visibilityFilter" inside my "TodoApp" component, so I need to pass it as a prop.

I could do this explicitly, but actually it's easier for me just to spread over all the state fields. So every state field inside the state object is passed as a prop to the "TodoApp" component. This way, it receives the "visibilityFilter". And if I add some todo items and then click on them, so I change their "completed" fields, and then click on the visibility filter links, the currently visible todos are rendered according to the chosen visibility filter.

The links look all the same right now, but we want to highlight the chosen one. To implement this, we're going to need the "visibilityFilter" prop which says which is the current one.

I'm changing the beginning of the "render" method to destructure the "todos" and the "visibilityFilter" from the props, so I can access them directly now without typing "this.props" every time. I'm going to pass the "visibilityFilter" to every "FilterLink", so it can know which filter is the current one and apply different styling if the "currentFilter" matches the FilterLink's own filter.

After passing the "currentFilter" prop to every "FilterLink", I go back to the "FilterLink" declaration. And I'm adding "currentFilter" as a prop to it, and I'm adding a condition that says that when the filter is the "currentFilter", that is, when the link is active, I want to return a "span" instead of a link because I don't want it to be clickable. I want it to be static text.

This completes the user interface of our todo list example. It lets us add items. It lets us view items, toggle them as completed. And when we switch the visibility filter, it displays only relevant todos, and it also updates the link appearance, so we see which link is active.

Let's recap how a change in the visibility filter works. It starts with a dispatch code with an action of the type "SET_VISIBILITY_FILTER". And it passes filter, which is a prop, to the link component, so every one of those three links is going to have a different filter prop it passes in the action.

The store dispatch function will call our root reducer with the state and the action which in turn will call the "visibilityFilter" reducer with the part of the state and the action.

Note that when the action type is "SET_VISIBILITY_FILTER", it doesn't care for the previous state, it just returns the action filter as the next value, the next state, of the "visibilityFilter" reducer. The root reducer will use this new field as part of its new state object.

And because the "render" function is subscribed to the store changes, it's going to get this new state object and pass all its keys as props to the "TodoApp" component. So the "TodoApp" component will receive the "todos" and the updated "visibilityFilter" as its props.

Both these props are passed through the "getVisibleTodos" function, which calculates the currently visible todos according to a list of all "todos" and the "visibilityFilter". And the filter is just a string saying show all, completed, or active.

And the return value is a new array of todos that in some cases, filters them, and in some cases, returns as is. And the show completed and show active are only different in their predicates.

The returned value is the array of visible todos. And it is used in the render function to actually enumerate every todo and render it.

And the "visibilityFilter" field is also used by the FilterLinks as the "currentFilter" because the "FilterLink" wants to know whether its filter is the current one in order to render a "span" instead of a link. This is how clicking a link makes it appear selected and changes the currently displayed items in the list.
