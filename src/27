In the previous lesson, I added "react-redux" bindings to the project and I used a "Provider" component from "react-redux" to pass the store down the context so that the container components can read the store from the context and subscribe to its changes. All container components are very similar.

They need to re-render when the store state changes, they need to unsubscribe from the store when they unmount and they take the current state of the Redux store and use it to render the presentational components with some props that they calculate from the state of the store, and they also need to specify the "contextTypes" to get the store from the context.

I'm going to write this component in a different way now. And I'll declare a function called "mapsStateToProps" which takes the redux store state and returns the props that I need to pass to the presentational "TodoList" component, to render it with the current state.

In this case, there is just a single prop called "todos". So I copy-paste this expression to the "mapStateToProps "function. It returns the props that depend on the current state of the redux store. So in this case, this is just the "todos" prop.

I'm creating another function that I call "mapDispatchToProps". And it accepts the "dispatch" method from the store as the only argument and returns the props that should be passed to the "TodoList" component and they depend on the "dispatch" method.

The only prop that uses "store.dispatch" is called "onTodoClick". So I copy-paste the "onTodoClick", into "mapDispatchToProps". Now that I don't have the reference to the store here anymore. So instead, I'm changing it just to use the "dispatch", which is provided as an argument to "mapDispatchToProps".

I will add some punctuation to make it appear easier on my eyes. "onTodoClick" is a function that accepts the ID of the todo, and dispatches an action. Now, I've got two different functions.

The first one maps the redux store state to the props of the "TodoList" component that are related to the data from the redux store. The second function maps the "dispatch" method of the store to the callback props of "TodoList" component. It specifies the behavior, that is, which callback prop dispatches which action.

To gather this, your function has described a container component so well that instead of writing it, I can generate it by using the "connect" function provided by "react-redux" library. If you use Babble and NPM, you will likely import it like this instead. And don't forget the curly braces.

Now, instead of declaring a class, I'm going to declare a variable. And I will call the "connect" method to obtain it. I'm passing "mapStateToProps" as the first argument and "mapDispatchToProps" as the second argument. And notice that this is a curry function, so I have to call it once again. And this time, I pass the presentational component that I wanted to wrap and pass the props to it.

The "connect" function will generate the component, just like the one I previously wrote by hand. So I don't need to write the code to subscribe to the store or to specify the "contextTypes", because the "connect" function takes care of that.

Now, let's recap how to generate the container component using the "connect" function. First, I'll write a function called "mapStateToProps" that takes the state of the redux store and returns the props for the presentational component calculated from it.

These props will be updated anytime the state changes. Next, I write a function that I call "mapDispatchToProps". It takes the "stores.dispatch" method as its first argument. And it returns the props that used the "dispatch" method to dispatch actions, so it returns the callback props needed for the presentational component.

To create the container component from them, I import "connect" from the "react-redux" library and I call it passing "mapStateToProps" as the first argument and "mapDispatchToProps" as the second argument.

Finally, I close the function call paren and I open another paren, because this is a curry function and it needs to be called twice. And the last argument is the presentational component that I want to connect to the redux store.

The result of the "connect" call is the container component that is going to render my presentational component. It will calculate the props to pass to the presentational component by merging the objects returned from "mapStateToProps", "mapDispatchToProps", and its own props.
