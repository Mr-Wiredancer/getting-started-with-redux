In the previous video we looked at how to implement a simple counter example using the "createStore" function provided by Redux and the "store" object it returns that provides the "getState" method to get the current application state, the "dispatch" method, to change the current application state by dispatching an action, and the "subscribe" method to subscribe to the changes and re-render our application with the current state of the app.

If you're like me you prefer to understand the tools that you're using. In this tutorial we're going to re-implement the "createStore" function provided by Redux from scratch. The first and the only, from what we know so far,  argument to the "createStore" function is the reducer function provided by the application.

And we know that the store holds the current state. We keep it in a variable, and the "getState" function is going to return the current value of that variable. This function, combined with the "dispatch" function and the "subscribe" function on a single object is what we call the Redux store.

Because the "subscribe" function can be called many times, we need to keep track of all the change listeners. And any time it is called we want to push the new listener into the array. Dispatching an action is the only way to change the internal state.

And in order to calculate the new state we call the reducer with the current state and the action being dispatched. After the state was updated, we need to notify every change listener, by calling it.

There is an important missing piece here. We haven't provided a way to unsubscribe a listener. But instead of adding a dedicated "unsubscribe" method, we'll just return a function from the "subscribe" method that removes this listener from the "listeners" array.

Finally, by the time the store is returned we wanted to have the initial state populated. So we're going to dispatch a dummy action just to get the reducer to return the initial value.

This implementation of the Redux store, apart from a few minor details in edge cases, is the createStore which was shipped with Redux.
