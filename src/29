Finally, let's take a look at the "FilterLink" container component that renders a "Link" with an active property and a click handler. First, I will write the "mapStateToProps" function, which I'll call, "mapStateToLinkProps", because I have everything in a single file.

And it's going to accept the state of the Redux store and return the props that should be passed to the "Link". And we only have a single such prop called, "active" that determines whether the "Link" displays the current visibility filter.

When I paste this expression from the "render" method, I see that it references the "filter" prop of the "FilterLink" component. To tell whether a "Link" is active, we need to compare this prop with the "visibilityFilter" value from the Redux store state.

It is fairly common to use the container props when calculating the child props, so this is why props are passed as a second argument to "mapStateToProps". I will rename it to "ownProps" to make it clear we are talking about the container component's own props and not the props that are passed through the child, which is the return value of "mapStateToProps".

The second function I'm writing here is "mapDispatchToProps" or, to avoid name clashes in this JSbin, "mapDispatchToLinkProps". The only argument so far is the "dispatch" function. And I'm going to need to look at the container component I wrote by hand to see what props depend on the "dispatch" function.

In this case, this is just the click handler where I dispatch the "SET_VISIBILITY_FILTER" action. The only prop I'm passing down is called, "onClick". And I declare it as an arrow function with no arguments, and I paste the dispatch code. But it references the props again, so I need to add "ownProps" as an argument, the second argument, to "mapDispatchToProps" function to you.

Finally, I will call the "connect" function from "react-redux" library to generate the "FilterLink" container component. I pass the relevant "mapsStateToProps" function as the first argument, the "mapDispatchToProps" as the second argument, and I call the function again with a "Link" component which should be rendered. Now I can remove the old "FilterLink" implementation.

Let's recap the data flow in this example. The "Footer" component renders three "FilterLink"s, and each of them has a different "filter" prop that specifies which "Filter" it corresponds to. This prop will be available on the "ownProps" object that both "mapDispatchToProps" and "mapStateToProps" will receive as the second argument.

We pass these two functions to the "connect" call, which will return a container component called, "FilterLink". The "FilterLink" will take the props that will return from the "mapDispatchToProps" and "mapStateToProps" and pass them as props to the "Link" component that it wraps.

We can now use the "FilterLink" container component and specify just the "Filter", but the underlying "Link" component will have received the calculated "active" and "onClick" values.
