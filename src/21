In the previous lesson, I extracted the "Todo" and "TodoList" components from the "TodoApp" component. In this lesson, I will continue extracting other presentational components to separate the looks from the behavior.

Now I want to extract the input and the button into a separate component called, "AddTodo." I'm declaring "AddTodo" as a functional component that doesn't accept any props. And I'm going to return these copy-pasted input and button, but I'm wrapping them in a div because a component needs to have a single root element.

The functional components don't have instances. However, instead of using this, I can use a local variable called, "input," that I'm going to close over so I can write to it in the callback graph and I can read from it in the event handler.

Like previously, I want it to be a presentational component and not specify behavior, so I am just calling the function called, "onAddClick," passing the current "input.value". I make "onAddClick" a prop so that the component that uses "AddTodo" can specify what happens when that button is clicked.

Again, the "TodoApp" component acts as a container component for the "AddTodo". And it specifies that when add button is clicked, we should dispatch an action with the type "ADD_TODO", the corresponding "text", and the "nextTodoId".

The last component I want to extract today is the footer, which contains all these three "FilterLink"s. I'm creating a new functional component called, "Footer." And I'm not sure which props it needs, so I skip them. And  I paste the markup. It seems that the "FilterLink" need the "visibilityFilter", so I add it as a prop.

I would like the "Footer" and the "FilterLink" to be presentational components. However, the "FilterLink" currently includes a "store.dispatch" call. I am replacing it with an "onClick" call. And I pass the "filter" as the single parameter for the calling component's convenience. I add "onClick" to the props.

Now I need to specify it every time "FilterLink" is used. So I add "onFilterClick" to the footer. I pass "onClick" equals "onFilterClick" for every "FilterLink" in the "Footer", so whatever we pass to the "Footer" as "onFilterClick" prop is going to end up in the "FilterLink" as "onClick".

Now I can use the "Footer" component I just defined inside my "TodoApp" component. I need to pass to props, one of them is the "visibilityFilter" so it can highlight the active link. And another prop is "onFilterClick" where I say that whenever a filter is clicked, I want to dispatch an action with a type "SET_VISIBILITY_FILTER" and the filter being clicked.

Finally, I just noticed that the "TodoApp" component doesn't actually have to be a class. I can turn it into a function. I prefer to do that when possible.

Instead of destructuring the props inside the "render" method, I am now doing it inside the argument. I can remove now the destructuring. I'm also going to remove the "render" method declaration. The visible todos are only used in a single place, so I'm moving the "getVisibleTodos" call to the "TodoList"'s todos prop declaration. Now the body of my function is just a single expression, so I can get rid of the return statement and unintended code to make it look nicer.

This concludes the initial refactoring of the todo list application into a single container component called "TodoApp" and many presentational components that are only concerned with how things look. Let's recap the data flow in this example.

We have a single container component called "TodoApp". And we re-render it any time the store changes. It receives the keys of the global state object as the props, so it receives the "todos" and the "visibilityFilter" values.

The first component it renders is called "AddTodo". "AddTodo" is a presentational component that renders an input and a button. When the button is clicked, it passes the current input value to the "onAddClick" function.

"OnAddClick" function is a prop for the "AddTodo" component. In this case, it is specified by the "TodoApp", which says that when the button is clicked, it should dispatch an action containing the current text in the action object. Dispatching the "ADD_TODO" action will call our reducer, update the store state with the new todos, and re-render "TodoApp" component with the new todos.

The todos themselves are rendered by the "TodoList" presentational component that receives two props, the currently visible todos and the "onTodoClick" callback.

The "TodoList" component receives an array of todos, and it maps over them, rendering individual "Todo" components. It uses the spread operator to pass every property of the todo object as a prop to "Todo" component. And it specifies the "onClick" handler as calling "onTodoClick" with the ID of the particular todo.

The "Todo" component is defined above. And it is also a presentational component, so it doesn't specify the behavior. It says that when a list item is clicked, it should call the "onClick" handler. Being a presentational component, it specifies how the component looks in different circumstances. In this case, it uses the "completed" prop to choose between two different styles of the todo item.

The "TodoList" is also presentational component. So it delegates actually handling the click to "onTodoClick" prop. It passes the ID of the todo being clicked.

Finally, the "TodoApp" component reacts to it by dispatching an action containing the ID of the todo clicked and the type "TOGGLE_TODO". The store will call our reducer and update the state of the application, re-rendering the "TodoApp" component with the new todos.

The "Footer" component receives the current visibility filter as a prop and also receives the "onFilterClick" callback that sets the current visibility filter. The "Footer" component renders three "FilterLinks", passing down their respective filter values, the "onClick" handler, and the current visibility filter.

The "FilterLink" component being a presentational component doesn't know what to do when it's clicked, so it calls the "onClick" callback, passing the filter, which is different for each of those links, as an argument. The "Footer" delegates handling the click of the "FilterLink" to its own prop, called "onFilterClick".

Finally, the "TodoApp" component being the container component in our application specifies the behavior, which in this case means that when the "FilterLink" is clicked, it should dispatch an action with the type "SET_VISIBILITY_FILTER", and the new filter.

Separation of the presentational components is not required in Redux, but I recommend this pattern because it decouples your rendering from Redux. So if you later choose to move your project to another framework, such as Relay, you will not have to change all your components because you can keep the presentational components exactly the same.

This approach also has downsides, such as that you have to thread a lot of props through the components to get them to the list components, including the callbacks. This problem can be easily solved by introducing many intermediate container components as we will see in the next lesson.
