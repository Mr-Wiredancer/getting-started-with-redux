In the previous lesson, I separated the "Link" presentational component from the "FilterLink" container component that is subscribed to the Redux store and that provides the data and the behavior for the "Link" component it renders.

While it makes the data flow a little bit less explicit, it makes it easy to use "FilterLink" in any component without worrying about passing additional data to the "FilterLink" or to the component that contains it. In this lesson we'll continue extracting the container components from the top level container component. And the first candidate is the "TodoList" component.

I actually want to keep the "TodoList" presentational component. However, I want to encapsulate within the currently visible todos into a separate container component that connects the "TodoList" to the Redux store. I'm going to call this component the "VisibleTodoList".

Just like when declaring the "FilterLink" component in the previous lesson, I calculate the data from the current component by using the current state which is the state from the Redux store. I'm using the "getVisibleTodos" function to calculate the currently visible todos based on all the todos from the Redux store and the current visibility filter from the Redux store state. And I'm specifying the behavior as well. I'm seeing that when the todo is clicked, we should dispatch an action with the type "TOGGLE_TODO" and the ID of the todo being clicked.

All container components are similar. Their job is to connect a presentational component to the Redux store and specify the data and the behavior that it needs. I'm scrolling up to the "FilterLink" container component I wrote in the previous lesson to copy-paste this store subscription logic.

Just like the "FilterLink", the visible "TodoList" is going to subscribe to this store and force an update any time the store state changes because it uses this state in its render method. Now that the visible "TodoList" is connected to the Redux store, we can use it instead of the "TodoList". And we no longer have to pass all the props from the top.

Finally, in the previous lesson, I made "AddTodo" a presentational component, but I'm going to backtrack on this now. I will copy-paste the dispatch call back in line into the onClick handler inside the component because there isn't really a lot of presentation or behavior here.

And it's easier to keep them together until we figure out how to split the presentation. For example, if in the future, we're going to have something like a "Form" component, we may split it, but for now we'll keep them together.

I'm scrolling down to my "TodoApp" component. And I'm removing the "onAddClick" prop. And I just noticed that none of the containers actually need any props from the state. So I can remove the props of the "TodoApp" component. And I can remove the "render" function that renders the "TodoApp" component with the current state of the store because I can just call it once, remove all the props that are related to the state and just render it as is because the container components that I render are going to subscribe to this store themselves and are going to update themselves when the store state changes.

Let's recap the data flow after separating the presentational and the container components. There is just one "React.Render" call at the very end. We don't render again when this store state changes because the container components take care of that.

The first component I'm looking at is called "AddTodo". Frankly, I can classify it either as a presentational component or as a container component because it doesn't fit either category. The input and the button are the presentational part, but dispatching an action on click is the behavior which is usually specified by the container.

However, in this case, I'd rather keep them together because there isn't any state, the UI is very simple. It's hard to imagine any other behavior other than dispatching the "ADD_TODO" action.

The second component rendered inside the "TodoApp" is called the "visibleTodoList". And this time, it is a proper container component that subscribes to the store and re-renders the "TodoList" any time the store state changes. It calculates the visible todos from the current Redux store state, the todos and the "visibilityFilter" fields. And it passes them as the "todos".

And when the todos are clicked, it's going to dispatch an action with the type "TOGGLE_TODO" and the ID of the respective ToDo. The actual rendering here is performed by the "TodoList" component that just renders the todos passed through it as prop and binds their clicks through the "onTodoClick" prop.

Finally, the last component "TodoApp" renders is the "Footer". The "Footer" is just a presentational component rendering three different "FilterLink"s. The "FilterLink" is a container component. So It subscribes to the store and it renders the presentational component called, "Link," calculating whether it should be active based on its props and the current Redux store state and specifies the behavior what happens when it's clicked.

Finally, the "Link" component is just a presentational component that renders an "a" tag. Separating the container and the presentational components is often a good idea, but you shouldn't take it as a dogma. Only do this when it truly reduces the complexity of your code base.

In general, I suggest first trying to extract the presentational components. And if there is too much boilerplate passing the props through them, then you can create the containers around them that load the data and specify the behavior.
