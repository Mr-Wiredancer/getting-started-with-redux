In the previous lesson, we implemented the "Provider" component that uses the react advanced context feature to make the store from the props available to every component in our app.

So if we pass it through the "Provider", we can read it in any other component from the context, which is really convenient for the container components. In fact, this is so convenient that you don't need to actually write the "Provider" yourself, because it is included in a special library called "react-redux".

And note that it is not the same as Redux. This is a different library. These are React bindings to the Redux library. You can import the "Provider" by destructuring the "ReactRedux" global object in JSbin, or if you use Babbel, and something like NPM, you can import "Provider" with the braces, because it's a named export from "react-redux" package. Or if you write ES5 code, you can write "var Provider=require('react-redux').Provider", or "var Provider=ReactRedux.Provider".

Just like the "Provider" we wrote before, the "Provider" that comes with "react-redux" exposes the store you passed through. There's a prop on the context so the components can specify the context types, and then use this context's store to subscribe to the store updates and dispatch actions.
