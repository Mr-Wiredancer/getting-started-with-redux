In the previous lesson, I extracted the "Todo" and "TodoList" components from the "TodoApp" component. In this lesson, I will continue extracting other presentational components to separate the looks from the behavior.
在上一节课，我从 TodoApp 组件中抽取了 Todo 和 TodoList 组件。在这节课里，我将继续抽取其他展示组件，以此来分离部件的呈现方式和行为。

Now I want to extract the input and the button into a separate component called, "AddTodo." I'm declaring "AddTodo" as a functional component that doesn't accept any props. And I'm going to return these copy-pasted input and button, but I'm wrapping them in a div because a component needs to have a single root element.
现在我想要把输入框和按钮抽取到一个叫 AddTodo 的组件。我把 AddTodo 声明为一个不接收任何属性的功能组件。然后我会返回这些复制粘贴的输入框和按钮的代码，不过我要把他们放到一个 div 标签里面，因为组件必须有个单独的根元素。

The functional components don't have instances. However, instead of using this, I can use a local variable called, "input," that I'm going to close over so I can write to it in the callback graph and I can read from it in the event handler.
功能组件没有实例，尽管如此，我可以使用一个叫 input 的本地变量来代替 this.input。我要把它放在这里，这样我既可以在回调函数中对它进行写入操作，也可以在事件处理器中读取它。

Like previously, I want it to be a presentational component and not specify behavior, so I am just calling the function called, "onAddClick," passing the current "input.value". I make "onAddClick" a prop so that the component that uses "AddTodo" can specify what happens when that button is clicked.
像之前一样，我希望它成为一个展示组件，而不声明具体的行为。所以我只是调用 onAddClick() 函数，并传递当前的 input.value。我将 onAddClick() 变成一个属性，这样，使用 AddTodo 组件的组件，就可以声明按钮被点击后的行为了。

Again, the "TodoApp" component acts as a container component for the "AddTodo". And it specifies that when add button is clicked, we should dispatch an action with the type "ADD_TODO", the corresponding "text", and the "nextTodoId".
同样的，TodoApp 组件成为了 AddTodo 组件的容器组件。并且它指定了当添加按钮被点击时，我们会分发一个类型为“ADD_TODO”的动作。其中还有对应的 text 和 nextTodoId 字段。

The last component I want to extract today is the footer, which contains all these three "FilterLink"s. I'm creating a new functional component called, "Footer." And I'm not sure which props it needs, so I skip them. And  I paste the markup. It seems that the "FilterLink" need the "visibilityFilter", so I add it as a prop.
我今天想要抽取的最后一个组件是 Footer，它包含了三个 FilterLink 组件。我现在要创建一个新的功能组件叫 Footer，我不确定它需要哪些属性，所以我先选择跳过。然后我把整段代码粘贴了过来。看起来 FilterLink 好像需要 visibilityFilter，所以我把它作为一个属性添加上去。

I would like the "Footer" and the "FilterLink" to be presentational components. However, the "FilterLink" currently includes a "store.dispatch" call. I am replacing it with an "onClick" call. And I pass the "filter" as the single parameter for the calling component's convenience.
我想要让 Footer 和 FilterLink 成为显示组件。尽管如此，FilterLink 现在包含了一个 store.dispatch() 的调用。我会用一个onClick() 调用来代替它。为了调用 FilterLink 的组件的方便，我把 fliter 作为一个单独的参数传递给它。

I add "onClick" to the props. And now I need to specify it every time "FilterLink" is used. So I add "onFilterClick" to the footer. I pass "onClick" equals "onFilterClick" for every "FilterLink" in the "Footer", so whatever we pass to the "Footer" as "onFilterClick" prop is going to end up in the "FilterLink" as "onClick".
我添加了 onClick() 到 FilterLink 的属性里。而现在，每一次使用 FilterLinks 时，我都需要声明它。所以我在 Footer 中添加 onFilterClick()。然后我为 Footer 中的每个 FilterLink 传递了与 onFilterClick() 等价的 onClick()。所以不管我们传递什么给 Footer 作为 onFilterClick()，它最终都会成为 FilterLink 中的 onClick()。

Now I can use the "Footer" component I just defined inside my "TodoApp" component. I need to pass to props, one of them is the "visibilityFilter" so it can highlight the active link. And another prop is "onFilterClick" where I say that whenever a filter is clicked, I want to dispatch an action with a type "SET_VISIBILITY_FILTER" and the filter being clicked.
现在我可以在 TodoApp 部件中使用我刚刚定义的 Footer 组件了。我需要传递一些属性，其中一个是 visibilityFilter，这样它就可以高亮活跃的链接。另外一个属性 onFilterClick 是过滤器被点击时使用的，当一个过滤标签被点击时，我希望分发一个类型为“SET_VISIBILITY_FILTER”的动作，以及被点击的过滤标签。

Finally, I just noticed that the "TodoApp" component doesn't actually have to be a class. I can turn it into a function. I prefer to do that when possible.
最后，我注意到 TodoApp 组件没有必要是一个类。我可以将其转换成一个函数。我一般都会尽可能这样做。

Instead of destructuring the props inside the "render" method, I am now doing it inside the argument. I can remove now the destructuring. I'm also going to remove the "render" method declaration. The visible todos are only used in a single place, so I'm moving the "getVisibleTodos" call to the "TodoList"'s todos prop declaration. Now the body of my function is just a single expression, so I can get rid of the return statement and unintended code to make it look nicer.
之前我们是在 render() 函数中解构属性，而现在我要在参数里面去解构。所以我可以把解构从 render() 中移除掉。同时我还要移除掉 render() 方法的声明。visibleTodos 变量只在一个地方被使用，所以我把 getVisibleTodos() 调用移动到 TodoList 的 todos 属性声明里面。现在，我的函数体就只是一个单独的表达式了，所以我可以删除掉返回语句和不必要的代码，这样让代码看起来更简洁。

This concludes the initial refactoring of the todo list application into a single container component called "TodoApp" and many presentational components that are only concerned with how things look. Let's recap the data flow in this example.
这就是 todo 列表应用的初步重构，我们把应用转化成一个单一的 TodoApp 容器部件，以及很多只关心内容呈现方式的展示部件。让我们回顾一下这个示例中的数据流。

We have a single container component called "TodoApp". And we re-render it any time the store changes. It receives the keys of the global state object as the props, so it receives the "todos" and the "visibilityFilter" values.
我们有一个单独的容器组件叫 TodoApp。并且我们会在每次store改变时重新渲染它.它接收全局的 state 对象的键作为属性，所以它接收了 todos 和  visibilityFilter。

The first component it renders is called "AddTodo". "AddTodo" is a presentational component that renders an input and a button. When the button is clicked, it passes the current input value to the "onAddClick" function.
它渲染的第一个组件叫 AddTodo。AddTodo 是一个展示组件，它渲染了一个输入框和一个按钮。当按钮被点击时，它将当前的输入框的文本传递给 onAddClick() 函数。

"OnAddClick" function is a prop for the "AddTodo" component. In this case, it is specified by the "TodoApp", which says that when the button is clicked, it should dispatch an action containing the current text in the action object. Dispatching the "ADD_TODO" action will call our reducer, update the store state with the new todos, and re-render "TodoApp" component with the new todos.
OnAddClick() 函数是 AddTodo 组件的一个属性。在这个例子中，它是由 TodoApp 所定义的，当按钮被点击时，它应该分发一个动作，其中包含了当前的输入文本。分发”ADD_TODO”动作回调用 reducer，用新的 todo 的数组来更新 store 状态，然后重新渲染 TodoApp 部件。

The todos themselves are rendered by the "TodoList" presentational component that receives two props, the currently visible todos and the "onTodoClick" callback.
这些 todo 被展示组件 TodoList 渲染，它接受两个属性，一个是当前可见的那些 todo，另一个是 onTodoClick() 回调。

The "TodoList" component receives an array of todos, and it maps over them, rendering individual "Todo" components. It uses the spread operator to pass every property of the todo object as a prop to "Todo" component. And it specifies the "onClick" handler as calling "onTodoClick" with the ID of the particular todo.
TodoList 组件接收一个 todo 的数组，然后通过数组的 map() 方法，来分别渲染每一个 Todo 组件。它使用展开操作符，来将 todo 对象的每个属性，转化成 Todo 部件的属性来传递。它还定义了 onClick 处理器，让它用具体 todo 的 ID 来调用 onTodoClick()。

The "Todo" component is defined above. And it is also a presentational component, so it doesn't specify the behavior. It says that when a list item is clicked, it should call the "onClick" handler. Being a presentational component, it specifies how the component looks in different circumstances. In this case, it uses the "completed" prop to choose between two different styles of the todo item.
我们之前已经定义了 Todo 组件。它也是一个展示组件 所以它指定行为。当一个列表项被点击时，它应该调用 onClick 处理器。作为一个展示组件，它表明了在不同条件下部件的呈现方式。在这个例子中，它使用了 completed 属性来选择列表项的两种风格中的一种。

The "TodoList" is also presentational component. So it delegates actually handling the click to "onTodoClick" prop. It passes the ID of the todo being clicked.
TodoList 也是一个展示组件，所以它将点击的处理代理 onTodoClick 属性。它传递了被点击的 todo 的 ID。

Finally, the "TodoApp" component reacts to it by dispatching an action containing the ID of the todo clicked and the type "TOGGLE_TODO". The store will call our reducer and update the state of the application, re-rendering the "TodoApp" component with the new todos.
最后，TodoApp 组件做出反应，分发了一个包含 todo ID 以及类型为”TOGGLE_TODO”的动作。store 会调用我们的 reducer 来更新应用的状态，用新的 todos 重新渲染 TodoApp 组件。

The "Footer" component receives the current visibility filter as a prop and also receives the "onFilterClick" callback that sets the current visibility filter. The "Footer" component renders three "FilterLinks", passing down their respective filter values, the "onClick" handler, and the current visibility filter.
Footer 组件接收当前可见的过滤器作为一个属性，以及用来设置当前可见过滤器的 onFilterClick() 回调。Footer 部件渲染了三个 FilterLink，将它们各自的过滤器值，onClick 处理器，以及当前可见的过滤器传递给它们。

The "FilterLink" component being a presentational component doesn't know what to do when it's clicked, so it calls the "onClick" callback, passing the filter, which is different for each of those links, as an argument. The "Footer" delegates handling the click of the "FilterLink" to its own prop, called "onFilterClick".
FilterLink 组件作为一个展示型组件，并不知道当它被点击时该做什么，所以它调用 onClick()，将过滤器传递给它作为参数，而每个链接对应的过滤器都是不一样的。Footer 将 FilterLink 的点击处理，代理给 Footer 自己的属性，也就是 onFilterClick。

Finally, the "TodoApp" component being the container component in our application specifies the behavior, which in this case means that when the "FilterLink" is clicked, it should dispatch an action with the type "SET_VISIBILITY_FILTER", and the new filter.
最后，容器组件 TodoApp 在我们的应用中指定了行为。在我们的例子中，这个行为就是，当 FilterLink 被点击时，它应该分发一个动作，动作的类型是”SET_VISIBILITY_FILTER”，并且包含了新的过滤器。

Separation of the presentational components is not required in Redux, but I recommend this pattern because it decouples your rendering from Redux. So if you later choose to move your project to another framework, such as Relay, you will not have to change all your components because you can keep the presentational components exactly the same.
在 Redux 中，展示组件的分离并不是强制的，但我推荐这种模式，因为它将渲染从 Redux 中解耦。所以，如果你以后选择将你的工程迁移到另外一个框架，比如 Relay，你就不用修改你全部的组件，因为你的展示组件可以保持原样。

This approach also has downsides, such as that you have to thread a lot of props through the components to get them to the leaf components, including the callbacks. This problem can be easily solved by introducing many intermediate container components as we will see in the next lesson.
这种方法也有缺点，比如你不得不把很多属性，包括回调函数，一层层传给底层组件。这个问题可以通过引入多个中间容器组件来轻松解决，而我们将在下一课中学习这个方法。
