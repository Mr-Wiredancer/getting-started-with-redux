1
00:00:00,220 --> 00:00:01,650
在前面的两节课中

2
00:00:01,710 --> 00:00:06,800
我们为 todo 列表应用创建了用户界面

3
00:00:06,850 --> 00:00:08,170
用于显示 todo

4
00:00:08,170 --> 00:00:09,710
添加新的 todo

5
00:00:09,710 --> 00:00:11,710
和通过点击切换它们的完成状态

6
00:00:12,280 --> 00:00:17,540
我们通过发起 ADD_TODO 和 TOGGLE_TODO 动作来实现

7
00:00:17,540 --> 00:00:20,910
我们已经知道 reducer 会怎么处理它们

8
00:00:21,540 --> 00:00:22,220
在这节课

9
00:00:22,220 --> 00:00:25,200
我们将通过发起 SET_VISIBILITY_FILTER 动作

10
00:00:25,420 --> 00:00:30,910
并使用 visibilityFilter 字段来只显示用户想看到的 todo

11
00:00:30,910 --> 00:00:32,570
在当前状态中已完成的 todo

12
00:00:32,570 --> 00:00:33,710
或是进行中的 todo

13
00:00:33,710 --> 00:00:36,280
或是所有的 todo

14
00:00:38,000 --> 00:00:40,800
我从创建一个新组件开始

15
00:00:40,800 --> 00:00:44,970
一个新的功能组件 FilterLink

16
00:00:44,970 --> 00:00:49,710
用户需要点击它来切换当前可见的 todo

17
00:00:49,940 --> 00:00:52,970
FilterLink 接受 filter 属性

18
00:00:52,970 --> 00:00:54,400
它只是一个字符串

19
00:00:54,400 --> 00:00:55,540
还有 children

20
00:00:55,540 --> 00:00:57,770
它是链接的内容

21
00:00:58,050 --> 00:01:02,340
它是一个简单的 <a> 标签

22
00:01:02,340 --> 00:01:05,250
不链接到任何其它地方

23
00:01:05,310 --> 00:01:08,400
并防止点击它时发生的跳转

24
00:01:08,400 --> 00:01:11,020
它将发起一个动作

25
00:01:11,020 --> 00:01:13,540
类型是 SET_VISIBILITY_FILTER

26
00:01:13,540 --> 00:01:16,050
并且把 filter 属性传递给它

27
00:01:16,050 --> 00:01:22,000
这样 reducer 才知道是哪一个过滤器被点击了

28
00:01:22,620 --> 00:01:25,480
我将把 children 传递到 <a> 标签下

29
00:01:25,480 --> 00:01:28,970
这样用户就可以自己指定链接的文本了

30
00:01:29,140 --> 00:01:32,280
现在我可以把它用到我的 TodoApp 组件中

31
00:01:33,420 --> 00:01:34,970
就在 todo 列表下面

32
00:01:34,970 --> 00:01:36,570
我添加一段内容

33
00:01:36,570 --> 00:01:40,570
使用刚创建的 FilterLink 组件

34
00:01:40,680 --> 00:01:43,820
为用户提供选择

35
00:01:43,820 --> 00:01:47,710
哪些 todo 是当前可见的

36
00:01:48,340 --> 00:01:52,170
filter 属性是三个可能的值之一

37
00:01:52,170 --> 00:01:53,940
比如 SHOW_ALL

38
00:01:53,940 --> 00:01:57,080
对应显示状态中所有的 todo

39
00:01:57,080 --> 00:01:58,450
SHOW_ACTIVE

40
00:01:58,450 --> 00:02:02,340
意味着只显示那些还没有完成的 todo

41
00:02:02,340 --> 00:02:03,880
和 SHOW_COMPLETED

42
00:02:03,880 --> 00:02:06,450
意味着显示已完成的 todo

43
00:02:06,620 --> 00:02:09,310
所以我复制粘贴 FilterLink

44
00:02:09,310 --> 00:02:13,940
然后修改它们的标签和对应的 filter 属性

45
00:02:15,540 --> 00:02:16,510
运行这段代码

46
00:02:16,510 --> 00:02:19,940
将会在 todo 列表下面显示三个不同的东西

47
00:02:20,220 --> 00:02:23,880
点击它们将会改变状态中的 visibilityFilter 字段 ( 的值 )

48
00:02:24,000 --> 00:02:26,220
然而 目前还没有任何效果

49
00:02:26,220 --> 00:02:31,020
因为我们还没有使用到 visibilityFilter 的值

50
00:02:33,600 --> 00:02:35,770
现在我创建一个新的函数

51
00:02:35,770 --> 00:02:40,620
该函数根据 filter 的值来帮助我过滤这些 todo

52
00:02:40,850 --> 00:02:43,540
所以把它命名为 getVisibleTodos()

53
00:02:43,540 --> 00:02:45,480
它接受两个参数

54
00:02:45,480 --> 00:02:47,820
todos 和 filter

55
00:02:47,820 --> 00:02:50,680
它对当前的 filter 值进行匹配

56
00:02:50,680 --> 00:02:53,020
如果 filter 是 SHOW_ALL

57
00:02:53,020 --> 00:02:55,600
那么它将返回所有的 todo

58
00:02:55,600 --> 00:02:57,820
但是如果 filter 是 SHOW_COMPLETED

59
00:02:57,820 --> 00:03:00,450
它将调用 todos.filter()

60
00:03:00,450 --> 00:03:02,450
那是数组的 filter 方法

61
00:03:02,450 --> 00:03:07,250
只返回那些 completed 字段为真的 todo

62
00:03:07,420 --> 00:03:10,680
SHOW_ACTIVE 和它正好相反

63
00:03:10,680 --> 00:03:16,110
它将只返回 completed 字段为假的 todo

64
00:03:17,820 --> 00:03:23,140
现在我需要在渲染它们之前调用这个方法来过滤这些 todo

65
00:03:23,140 --> 00:03:26,970
在 TodoApp 组件的 render 方法中

66
00:03:27,140 --> 00:03:31,600
我通过从属性中取得 todos 和 visibilityFilter 值

67
00:03:31,710 --> 00:03:36,340
来调用 getVisibileTodos() 得到可见的 todo

68
00:03:36,510 --> 00:03:41,880
并且我将在逐一渲染它们的时候

69
00:03:41,880 --> 00:03:45,020
使用 visibleTodos 来替代属性上的 todos

70
00:03:46,670 --> 00:03:51,370
最后 我现在在我的 TodoApp 组件内使用了 visibilityFilter

71
00:03:51,370 --> 00:03:53,480
所以我需要把它作为属性传递进去

72
00:03:53,540 --> 00:03:55,480
我可以显式地传递

73
00:03:55,650 --> 00:03:57,650
但对我来说

74
00:03:57,650 --> 00:04:00,850
更简单的做法是（使用展开运算符）展开状态的所有字段

75
00:04:00,910 --> 00:04:07,820
这样状态对象中的每一个字段都将作为属性传递给 TodoApp 组件

76
00:04:08,450 --> 00:04:11,020
通过这种方式 它接收到了 visibilityFilter

77
00:04:11,080 --> 00:04:13,920
如果我添加一些 todo

78
00:04:13,920 --> 00:04:15,220
然后点击它们

79
00:04:15,300 --> 00:04:17,950
这样我就改变了它们的 completed 字段

80
00:04:18,170 --> 00:04:20,970
然后点击可见过滤器链接

81
00:04:21,300 --> 00:04:24,320
当前可见的 todo 就被渲染了

82
00:04:24,320 --> 00:04:27,270
对应被选中的可见过滤器

83
00:04:27,950 --> 00:04:30,050
现在这些链接看上去都一个样

84
00:04:30,050 --> 00:04:32,720
但是我想突出被选中的那个

85
00:04:34,020 --> 00:04:35,220
为了实现这个

86
00:04:35,220 --> 00:04:38,200
我们需要用到 visibilityFilter 这个属性

87
00:04:38,320 --> 00:04:40,720
它表明当前的过滤器是哪一个

88
00:04:41,720 --> 00:04:44,120
现在我修改 render 方法开头部分

89
00:04:44,120 --> 00:04:48,950
从属性中解构出 todos 和 visibilityFilter

90
00:04:49,470 --> 00:04:51,400
这样我可以直接使用它们

91
00:04:51,400 --> 00:04:54,100
而不用再每次都输入 this.props 了

92
00:04:54,870 --> 00:04:59,750
我们传递 visibilityFilter 给每一个 FilterLink

93
00:04:59,850 --> 00:05:03,050
这样它就可以知道哪一个是当前的过滤器

94
00:05:03,120 --> 00:05:06,500
如果 currentFilter 和 FilterLink 自己的 filter 属性值相同的话

95
00:05:06,500 --> 00:05:09,950
就采用不同的样式

96
00:05:10,900 --> 00:05:15,150
在传递了 currentFilter 属性给每一个 FilterLink 后

97
00:05:15,350 --> 00:05:18,220
我回到声明 FilterLink 的地方

98
00:05:18,650 --> 00:05:21,950
现在我给它添加 currentFilter 属性

99
00:05:22,420 --> 00:05:25,150
而且我添加一个条件判断

100
00:05:25,150 --> 00:05:27,750
如果 filter 属性跟 currentFilter 一样

101
00:05:27,750 --> 00:05:29,750
那么 这个链接是激活的

102
00:05:29,920 --> 00:05:32,750
我想返回一个 span 来替代一个链接

103
00:05:32,750 --> 00:05:35,070
因为我不想让它可以点击

104
00:05:35,170 --> 00:05:37,170
我想让它是静态文本

105
00:05:38,250 --> 00:05:42,320
现在完成了我们的 todo 列表示例的用户界面

106
00:05:42,520 --> 00:05:43,800
通过它

107
00:05:43,800 --> 00:05:44,870
我们可以添加 todo 项

108
00:05:44,870 --> 00:05:46,870
可以查看 todo 项

109
00:05:46,870 --> 00:05:48,700
切换它们为完成状态

110
00:05:48,850 --> 00:05:51,650
而且当我们切换可见过滤器时

111
00:05:51,750 --> 00:05:54,250
它只显示相应的 todo

112
00:05:54,250 --> 00:05:54,270
同时也更新链接的样子
它只显示相应的 todo

113
00:05:54,270 --> 00:05:56,770
同时也更新链接的样子

114
00:05:56,770 --> 00:05:58,870
这样我们可以看到哪个链接是激活的

115
00:06:00,650 --> 00:06:04,000
让我们来回顾一下可见过滤器的改变是怎么完成的

116
00:06:04,150 --> 00:06:08,670
从发起一个类型为 SET_VISIBILITY_FILTER 的动作开始

117
00:06:08,800 --> 00:06:12,120
并传递 filter 链接组件的一个属性

118
00:06:12,270 --> 00:06:16,350
这样这三个链接每一个都将拥用一个不同的 filter 属性

119
00:06:16,350 --> 00:06:17,950
去传递给动作

120
00:06:18,520 --> 00:06:23,800
store 的 dispatch 方法将使用状态和动作来调用我们的根 reducer

121
00:06:23,920 --> 00:06:27,320
它 ( 根 reducer ) 将会使用状态的一部分和动作

122
00:06:27,350 --> 00:06:30,470
相应地调用 visibilityFilter reducer

123
00:06:30,900 --> 00:06:34,320
注意当动作的类型是 SET_VISIBILITY_FILTER 时

124
00:06:34,320 --> 00:06:36,400
它不关心之前的状态

125
00:06:36,520 --> 00:06:38,920
它只是将动作的 filter 值返回

126
00:06:39,050 --> 00:06:44,170
作为 visibilityFilter reducer 的下一个状态值

127
00:06:44,770 --> 00:06:49,550
根 reducer 将会使用这个新的字段作为它的新的状态对象的一部分

128
00:06:49,770 --> 00:06:54,270
而且因为 render 方法被订阅到 store 的变化上

129
00:06:54,470 --> 00:06:57,220
它将得到新的状态对象

130
00:06:57,220 --> 00:07:02,120
传递 ( 新的状态对象的 ) 所有键作为属性到 TodoApp 组件

131
00:07:02,250 --> 00:07:05,900
所以 TodoApp 组件将会接收到 todo

132
00:07:05,900 --> 00:07:09,400
和更新后的 visibilityFilter 作为它的属性

133
00:07:10,050 --> 00:07:13,750
这两个属性都被传递给 getVisibleTodos 方法

134
00:07:13,750 --> 00:07:17,470
它根据 todos 和 visibilityFilter 

135
00:07:17,470 --> 00:07:20,600
计算出当前可见的 todo

136
00:07:20,800 --> 00:07:22,800
filter 只是一个字符串

137
00:07:22,800 --> 00:07:25,400
用来说明是显示所有的 已完成的 或是进行中的 todo

138
00:07:25,570 --> 00:07:29,200
返回值是一个新的数组

139
00:07:29,200 --> 00:07:31,200
某些情况下 是过滤 todo 数组得到的

140
00:07:31,200 --> 00:07:33,950
某些情况下 就是原来的 todo 数组

141
00:07:34,200 --> 00:07:39,370
显示已完成和显示进行中的 todo 区别仅在于它们的判断条件

142
00:07:40,150 --> 00:07:43,550
返回值是可见的 todo 数组

143
00:07:43,650 --> 00:07:49,370
它用于在 render 方法被逐个渲染

144
00:07:49,570 --> 00:07:51,650
还有 visibilityFilter 字段

145
00:07:51,650 --> 00:07:56,100
也用于 FilterLink 组件作为 currentFilter 属性

146
00:07:56,100 --> 00:08:02,000
因为 FilterLink 想知道它的 filter 值是否是当前使用的

147
00:08:02,120 --> 00:08:05,570
以便渲染一个 span 而不是一个链接

148
00:08:06,570 --> 00:08:08,320
这就是单击一个链接

149
00:08:08,420 --> 00:08:10,100
会让它表现为被选中

150
00:08:10,300 --> 00:08:13,950
同时改变当前显示的列表项的原理

