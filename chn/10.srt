1
00:00:00,100 --> 00:00:01,460
就像在之前的示例中一样

2
00:00:01,460 --> 00:00:04,480
我使用了 NPM 中的 expect 和 deep-freeze 库

3
00:00:04,480 --> 00:00:06,480
来为我的测试做断言

4
00:00:06,760 --> 00:00:10,340
这次我将测试 toggleTodo() 这个方法

5
00:00:10,660 --> 00:00:12,760
该方法取一个 todo 对象

6
00:00:12,760 --> 00:00:14,760
并将其 completed 属性翻转

7
00:00:14,800 --> 00:00:16,760
如果 completed 的原始值为 false

8
00:00:16,900 --> 00:00:19,120
其返回结果将变为 true

9
00:00:19,240 --> 00:00:21,400
如果是 true 其结果将变为 false

10
00:00:22,000 --> 00:00:23,760
就像上一节课一样

11
00:00:23,760 --> 00:00:28,140
我将从写一个可变的版本开始 尝试通过当前的测试

12
00:00:28,400 --> 00:00:34,920
这个版本只是将传入对象的 completed 属性的值翻转一下

13
00:00:35,120 --> 00:00:36,100
当测试通过之后

14
00:00:36,100 --> 00:00:38,760
我们知道可变对象在 Redux 中是不允许的

15
00:00:38,940 --> 00:00:40,300
为了达到这个目的

16
00:00:40,300 --> 00:00:42,560
我在我的 todo 对象上使用了 deepFreeze

17
00:00:42,780 --> 00:00:46,080
这样我将再也不能改变它的 completed 属性了

18
00:00:46,820 --> 00:00:49,980
解决这个问题的方法之一就是创建一个新对象

19
00:00:49,980 --> 00:00:53,140
这个对象复制了原始对象所有属性

20
00:00:53,380 --> 00:00:55,860
不过 complete 属性的值是翻转之后的值

21
00:00:56,980 --> 00:01:00,340
但是 如果我们后面再给新对象添加新属性

22
00:01:00,340 --> 00:01:03,500
我们可能会忘记更新这段代码来包含这些新的属性

23
00:01:04,200 --> 00:01:06,360
这就是为什么我建议你使用

24
00:01:06,360 --> 00:01:09,680
Object.assign() 这个 ES6 的新方法

25
00:01:09,860 --> 00:01:16,380
它让你可以将多个对象的属性赋给目标对象

26
00:01:17,260 --> 00:01:20,140
注意 Object.assign() 参数顺序

27
00:01:20,140 --> 00:01:23,740
如何与 JavaScript分配操作符相对应

28
00:01:23,940 --> 00:01:28,700
左边的参数是我们要赋予新属性的目标对象

29
00:01:28,700 --> 00:01:30,700
所以它会被改变

30
00:01:30,700 --> 00:01:34,200
这就是为什么我们传一个空对象给第一个参数

31
00:01:34,280 --> 00:01:36,620
这样我们就不会改变任何已存在的数据

32
00:01:37,340 --> 00:01:42,280
Object.assign() 的每一个其他参数将被认为一个源对象

33
00:01:42,380 --> 00:01:45,880
源对象的属性将复制到目标对象

34
00:01:46,500 --> 00:01:49,740
重要的一点是如果多个源对象中

35
00:01:49,740 --> 00:01:52,320
有相同名称的属性但有不同的属性值

36
00:01:52,320 --> 00:01:54,000
那么最终替换的是最后一个源对象的值

37
00:01:54,080 --> 00:01:58,060
并且这就是我们用来最后覆盖 completed 属性的方式

38
00:01:58,060 --> 00:02:00,860
而不管原来 todo 对象里面原来的 completed 属性是什么

39
00:02:01,740 --> 00:02:06,500
最后 你需要记住 Object.assign() 是一个 ES6 的新方法

40
00:02:06,500 --> 00:02:10,000
所以它不是在所有浏览器中都能使用

41
00:02:10,680 --> 00:02:12,340
你应该使用一个 polyfill

42
00:02:12,420 --> 00:02:16,580
可以使用 Babel 或者一个标准的 Object.assign() polyfill

43
00:02:16,660 --> 00:02:20,040
这样可以避免让你的网站崩溃

44
00:02:21,040 --> 00:02:23,980
另外一个不需要 polyfill 的方案

45
00:02:23,980 --> 00:02:27,040
就是使用新的对象扩展操作符

46
00:02:27,040 --> 00:02:29,260
它不是 ES6 的一部分

47
00:02:29,260 --> 00:02:32,040
但它已经在 ES7 的议案中出现

48
00:02:32,040 --> 00:02:33,580
它相当受欢迎

49
00:02:33,580 --> 00:02:38,300
可以通过设置 Babel 中的 Stage 2 preset 来使用它

