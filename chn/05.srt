1
00:00:00,480 --> 00:00:02,680
我们要写的第一个方法

2
00:00:02,820 --> 00:00:05,940
是计数器的 reducer

3
00:00:06,240 --> 00:00:09,660
这个 reducer 接受状态和动作作为参数

4
00:00:09,820 --> 00:00:11,380
并返回新的状态

5
00:00:11,600 --> 00:00:14,260
但在开始实现之前

6
00:00:14,460 --> 00:00:17,620
我们会用 Michael Jackson 的 Expect 库

7
00:00:17,680 --> 00:00:20,020
来写断言测试

8
00:00:20,480 --> 00:00:21,980
我们将确保

9
00:00:22,120 --> 00:00:24,300
当计数器的状态为 0 时

10
00:00:24,440 --> 00:00:26,640
传递一个 "INCREMENT" 动作后

11
00:00:26,640 --> 00:00:28,640
它会返回 1

12
00:00:28,640 --> 00:00:30,820
相似地 当状态为 1 时

13
00:00:30,940 --> 00:00:33,560
你递增它 它将返回 2

14
00:00:33,860 --> 00:00:35,920
我们将增加一些测试

15
00:00:35,920 --> 00:00:38,520
来看看 "DECREMENT" 是怎么工作的

16
00:00:38,880 --> 00:00:42,600
它会从2递减成1 从1递减成0

17
00:00:42,980 --> 00:00:45,500
我们还将增加一些输出

18
00:00:45,500 --> 00:00:48,300
来告诉我们测试是否成功

19
00:00:49,240 --> 00:00:51,300
如果这时你运行这个测试

20
00:00:51,420 --> 00:00:56,460
它会失败 因为我们甚至还没有开始实现这个 reducer

21
00:00:57,120 --> 00:01:00,040
我们从检查动作的类型开始

22
00:01:00,200 --> 00:01:04,060
如果动作的类型是 "INCREMENT" 我们返回 state+1

23
00:01:04,280 --> 00:01:09,200
但如果是 "DECREMENT" 我们返回 state-1

24
00:01:10,580 --> 00:01:11,940
如果这时你再运行测试 

25
00:01:11,940 --> 00:01:14,760
我们会发现现在这个 reducer 已经足够让测试通过

26
00:01:14,960 --> 00:01:20,660
但是 这个计数器 reducer 的实现仍然有一些不足

27
00:01:21,340 --> 00:01:27,300
比如 如果我们分发一个它不理解的动作

28
00:01:27,300 --> 00:01:30,600
它应该返回应用当前的状态

29
00:01:31,100 --> 00:01:35,060
然而 我们这时运行测试将会发现测试失败了

30
00:01:35,240 --> 00:01:38,280
因为我们目前还没有处理未知的动作

31
00:01:38,840 --> 00:01:41,560
所以我将添加一个 else 语句

32
00:01:41,560 --> 00:01:43,560
来返回当前的状态

33
00:01:44,140 --> 00:01:45,700
看 现在测试通过了

34
00:01:46,320 --> 00:01:51,460
另外一个问题是 虽然 reducer 通常控制着整个应用的状态

35
00:01:51,460 --> 00:01:54,420
但它现在却没有明确的初始状态

36
00:01:55,260 --> 00:01:58,000
在计数器这个例子中 初始状态应该是 0

37
00:01:58,440 --> 00:02:00,780
使用 Redux 有一个约定

38
00:02:00,920 --> 00:02:06,140
当 reducer 接收到 undefined 作为 state 参数时

39
00:02:06,260 --> 00:02:11,620
它必须返回它认为的应用的初始状态

40
00:02:11,820 --> 00:02:13,960
在这个例子中初始状态应该是 0

41
00:02:14,640 --> 00:02:17,060
现在我们来美化一下代码

42
00:02:17,140 --> 00:02:20,280
我们用 switch 语句来替代这部分代码

43
00:02:20,600 --> 00:02:27,000
使用更好看 ES6 默认参数语法来替代这个条件判断

44
00:02:27,200 --> 00:02:29,980
同时，我用 ES6 中具有更清晰语义的箭头函数

45
00:02:30,220 --> 00:02:35,300
替代这个函数声明

