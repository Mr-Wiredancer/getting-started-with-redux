1
00:00:00,420 --> 00:00:01,750
在上节课程中

2
00:00:01,750 --> 00:00:05,220
我们创建了一个可以处理两个 action 的 reducer

3
00:00:05,320 --> 00:00:09,050
增加一个新的 todo 和完成/撤销已有的 todo

4
00:00:09,520 --> 00:00:14,150
而现在，这段更新／添加一个 todo 的代码

5
00:00:14,150 --> 00:00:17,170
是放在 todos 这个 reducer 里面的

6
00:00:17,800 --> 00:00:19,950
这个函数令人费解

7
00:00:19,950 --> 00:00:22,570
因为我们要考虑两个不同的问题

8
00:00:22,670 --> 00:00:25,220
todos 数组是如何被更新的

9
00:00:25,270 --> 00:00:28,000
以及每个独立的 todo 是如何被更新的

10
00:00:28,600 --> 00:00:31,050
不仅仅是在 Redux 中有这个问题

11
00:00:31,050 --> 00:00:33,620
任何时候 如果一个函数做了太多事情

12
00:00:33,700 --> 00:00:36,420
你都会想从中提取出其他函数

13
00:00:36,450 --> 00:00:37,620
然后再调用它们

14
00:00:37,620 --> 00:00:41,020
这样每一个函数就只需要解决一个问题

15
00:00:41,720 --> 00:00:43,670
在这个例子中

16
00:00:43,700 --> 00:00:49,950
我认为根据动作来创建和更新一个 todo 是个独立的操作

17
00:00:49,950 --> 00:00:53,470
这个操作应该用一个独立的 todo 函数去处理

18
00:00:54,570 --> 00:00:57,070
出于 Redux 的约定

19
00:00:57,070 --> 00:00:59,750
我决定让这个 todo 函数接受两个参数

20
00:00:59,750 --> 00:01:02,820
当前状态和被分发的动作

21
00:01:02,820 --> 00:01:04,970
同时它应该返回下一个状态

22
00:01:05,170 --> 00:01:06,320
但是在 todo 这个函数中

23
00:01:06,420 --> 00:01:09,470
状态指向的是某个具体的 todo

24
00:01:09,470 --> 00:01:11,470
而不是整个 todo 的列表

25
00:01:12,120 --> 00:01:15,500
最后 不出意外 在 Redux 中它就可以顺利的运行了

26
00:01:15,670 --> 00:01:19,420
我们已近从 "todos" reducer 中提取了 "todo" reducer

27
00:01:19,420 --> 00:01:22,220
所以现在我们需要对每一个 todo 调用这个函数

28
00:01:22,220 --> 00:01:24,650
然后将结果合并到一个数组当中

29
00:01:28,720 --> 00:01:31,870
虽然在这个例子中我们没必要这样做

30
00:01:31,870 --> 00:01:36,470
但我还是建议你都有一个默认的 case 返回当前的状态

31
00:01:36,470 --> 00:01:38,650
以避免以后产生 bug

32
00:01:39,120 --> 00:01:43,720
这节课程中所描述的内容在 Redux 的开发中是无处不在的

33
00:01:43,750 --> 00:01:46,120
我们称它叫 reducer 组合

34
00:01:46,500 --> 00:01:53,270
不同的 reducer 定义了状态树的不同部分是如何根据动作作出更新

35
00:01:53,870 --> 00:01:57,020
Reducers 是普通的 JavaScript 函数

36
00:01:57,020 --> 00:01:59,770
所以我们可以调用其他的 reducers 作为代理

37
00:01:59,770 --> 00:02:01,070
抽象出一种方式

38
00:02:01,070 --> 00:02:05,050
来处理对它们所管理的状态树的某些部分的更新

39
00:02:05,370 --> 00:02:07,750
这种方式可以被应用很多次

40
00:02:07,750 --> 00:02:12,100
虽然还是有一个单独的上层 reducer 来管理你的应用的状态

41
00:02:12,270 --> 00:02:13,800
但你会发现

42
00:02:13,800 --> 00:02:16,300
当将它表述为多个 reducer 互相调用

43
00:02:16,350 --> 00:02:18,770
每一个 reducer 分别负责状态树的某一个部分

44
00:02:18,770 --> 00:02:22,020
这种方式是非常方便的。

