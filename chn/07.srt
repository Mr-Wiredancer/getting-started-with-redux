1
00:00:00,860 --> 00:00:02,100
在前面的视频中

2
00:00:02,100 --> 00:00:05,600
我们已经看到了如何实现一个简单的计数器的例子

3
00:00:05,740 --> 00:00:09,120
通过 Redux 提供的 createStore() 方法

4
00:00:09,280 --> 00:00:11,500
得到一个 store 对象

5
00:00:11,680 --> 00:00:15,660
通过 store 对象的 getState() 方法 得到应用当前的状态

6
00:00:15,800 --> 00:00:21,180
使用 dispatch() 方法分发动作去改变应用的状态

7
00:00:21,460 --> 00:00:24,820
使用 subscribe() 方法去订阅 store 的变化

8
00:00:24,820 --> 00:00:29,240
然后使用当前的状态去重新渲染整个应用

9
00:00:29,560 --> 00:00:33,360
如果你像我一样 你会喜欢去深究正在使用的工具的内部原理

10
00:00:33,460 --> 00:00:36,740
所 在这个教程中 我们将从头开始来重新实现

11
00:00:36,740 --> 00:00:40,900
Redux 提供的 createStore() 方法

12
00:00:42,520 --> 00:00:48,060
到目前为止就我们所知 createStore() 唯一的参数

13
00:00:48,220 --> 00:00:51,340
就是应用提供的 reducer

14
00:00:51,720 --> 00:00:55,080
而且我们知道 store 维护着当前的状态

15
00:00:55,220 --> 00:00:57,020
所以我们用一个变量来存储状态

16
00:00:57,200 --> 00:01:02,640
并且用 getState() 方法来返回这个变量的当前值

17
00:01:03,820 --> 00:01:08,660
getState()  dispatch() 还有 subscribe() 这三个方法

18
00:01:08,740 --> 00:01:12,780
一起组成了我们称作 Redux store 的对象

19
00:01:14,020 --> 00:01:16,800
因为 subscribe 方法会被调用很多次

20
00:01:16,800 --> 00:01:19,600
所以我们需要记录下所有的监听者

21
00:01:19,820 --> 00:01:21,280
只要它被调用

22
00:01:21,280 --> 00:01:24,460
我们就把新的监听者添加到监听者数组里

23
00:01:25,540 --> 00:01:29,940
分发动作是唯一可以改变内部状态的途径

24
00:01:30,180 --> 00:01:32,440
为了得到新的状态

25
00:01:32,440 --> 00:01:36,140
我们使用当前的状态和分发过来的动作作为参数 来调用 reducer

26
00:01:36,480 --> 00:01:38,400
在状态被更新后

27
00:01:38,520 --> 00:01:42,440
我们通过调用每一个监听者来通知它们

28
00:01:44,520 --> 00:01:46,620
这里漏掉了一个很重要的地方

29
00:01:46,620 --> 00:01:50,020
我们没有提供方法来取消订阅一个监听者

30
00:01:50,240 --> 00:01:53,620
为了避免增加一个专门的 unsubscribe() 方法

31
00:01:53,880 --> 00:01:57,680
我们从 subscribe() 方法中返回一个 

32
00:01:57,680 --> 00:02:01,280
可以将此监听者从 listeners 数组中移除的方法

33
00:02:03,480 --> 00:02:06,640
最后 在 store 被返回之前

34
00:02:06,800 --> 00:02:10,220
我们希望先填充初始状态的值

35
00:02:10,340 --> 00:02:13,040
所以我们在这里分发一个空的动作

36
00:02:13,140 --> 00:02:17,140
来让 reducer 返回初始状态值

37
00:02:18,140 --> 00:02:20,540
这个 Redux store 的实现

38
00:02:20,540 --> 00:02:23,660
除去一些边缘情况的小细节外

39
00:02:23,840 --> 00:02:26,980
就是 Redux 中 createStore() 的最终实现了

