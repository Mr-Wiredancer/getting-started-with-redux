1
00:00:00,460 --> 00:00:03,200
我把托管在 CDNJS 上面的 Redux 库

2
00:00:03,360 --> 00:00:06,580
以 script 标签的形式添加到应用里

3
00:00:06,720 --> 00:00:09,520
这是 UMD(Universal Module Definition) 版本

4
00:00:09,520 --> 00:00:13,020
所以它会暴露一个单一的全局变量 Redux

5
00:00:13,060 --> 00:00:14,300
注意是大写的 R

6
00:00:14,720 --> 00:00:19,600
在实际的应用中 我建议你使用 NPM

7
00:00:19,700 --> 00:00:23,340
还有 Webpack 或者 Browserify 这样的模块打包工具

8
00:00:23,460 --> 00:00:27,180
但在我们的例子中 UMD 版本就够用了

9
00:00:27,600 --> 00:00:32,880
目前我只需要 Redux 中的一个方法 createStore()

10
00:00:33,860 --> 00:00:36,860
这里我使用 ES6 的解构语法

11
00:00:36,860 --> 00:00:42,920
这等价于“var createStore = Redux.createStore;”

12
00:00:43,040 --> 00:00:49,300
或者 如果你使用 NPM 和像 Babel 这样的转译器来转译你的 ES6 代码

13
00:00:49,500 --> 00:00:54,860
你也可以这样写“import \ from Redux;” 注意是大括号

14
00:00:57,960 --> 00:01:02,060
store 把 Redux 的三大原则结合在一起

15
00:01:02,420 --> 00:01:05,620
它保存了应用当前的状态

16
00:01:05,820 --> 00:01:07,920
它允许你分发动作

17
00:01:08,100 --> 00:01:09,520
当你创建 store 的时候

18
00:01:09,520 --> 00:01:16,260
你需要指定 reducer 来让它知道当动作分发时 状态要如何更新

19
00:01:16,760 --> 00:01:17,760
在这个例子中

20
00:01:17,800 --> 00:01:19,460
我们调用 createStore 时

21
00:01:19,520 --> 00:01:23,720
指定 counter 作为 reducer 来管理状态的更新

22
00:01:24,400 --> 00:01:27,520
这个 store 有三个重要的方法

23
00:01:27,920 --> 00:01:31,460
第一个方法叫 getState()

24
00:01:31,860 --> 00:01:35,680
它可以获取 Redux store 当前的状态

25
00:01:36,420 --> 00:01:38,780
如果这时我们执行这个方法 我们将看到 0

26
00:01:38,920 --> 00:01:42,800
因为这是我们这个应用的初始状态

27
00:01:44,140 --> 00:01:48,640
第二个 也是我们最常使用的方法 叫 dispatch

28
00:01:48,800 --> 00:01:53,200
它允许你分发动作来改变应用的状态

29
00:01:53,760 --> 00:01:56,620
如果我们在分发动作后打印 store 的状态

30
00:01:56,720 --> 00:01:59,140
我们可以看到状态发生了改变

31
00:01:59,800 --> 00:02:02,760
当然 一直只是打印到控制台有点无聊

32
00:02:02,940 --> 00:02:06,000
我们实际上想渲染一些东西到 body 上

33
00:02:06,100 --> 00:02:10,260
Redux store 的第三个方法 subscribe 可以帮助我们做到这一点

34
00:02:10,860 --> 00:02:12,820
它允许你注册一个回调

35
00:02:12,820 --> 00:02:16,940
只要一个动作被分发 Redux store 就会调用这个回调

36
00:02:17,100 --> 00:02:20,420
这样你就可以更新应用的 UI

37
00:02:20,500 --> 00:02:23,160
而它(UI)反映了应用当前的状态

38
00:02:23,460 --> 00:02:25,340
我现在只用很简单的办法

39
00:02:25,340 --> 00:02:27,200
不使用 React 或其它库

40
00:02:27,240 --> 00:02:30,880
我只是把计数器渲染到网页的 body 上

41
00:02:30,980 --> 00:02:32,960
只要单击 body

42
00:02:33,100 --> 00:02:36,920
我就会分发一个动作来使计数器加 1

43
00:02:37,480 --> 00:02:43,120
如果你观察得很仔细的话 你会发现初始状态 0 没有被渲染

44
00:02:43,320 --> 00:02:47,900
这是因为渲染只发生在订阅的回调里

45
00:02:48,020 --> 00:02:51,320
但它在最开始的时候并没有被触发

46
00:02:51,440 --> 00:02:54,340
所以我把这个逻辑抽取出来到 render() 方法中

47
00:02:54,500 --> 00:02:57,940
我订阅 render() 方法到 store

48
00:02:58,080 --> 00:03:01,860
我同时手动调用 render() 方法一次 让它渲染初始状态

49
00:03:02,640 --> 00:03:06,600
现在它显示 0 而且每次单击都会使计数器递增

50
00:03:06,600 --> 00:03:09,580
这就是我们的第一个能用的 Redux 应用

