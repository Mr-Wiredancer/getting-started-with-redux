1
00:00:00,250 --> 00:00:01,370
在上一课中

2
00:00:01,370 --> 00:00:04,570
我们学习了如何使用 reducer 组合模式

3
00:00:04,570 --> 00:00:08,950
来让不同的 reducer 处理状态树的不同部分

4
00:00:08,950 --> 00:00:08,970
然后再合并它们的结果
来让不同的 reducer 处理状态树的不同部分

5
00:00:08,970 --> 00:00:11,170
然后再合并它们的结果

6
00:00:12,370 --> 00:00:14,800
实际上 这种模式是如此的常见

7
00:00:14,800 --> 00:00:18,020
以至于在大部分 Redux 应用中它都存在

8
00:00:18,070 --> 00:00:22,700
而这就是为什么  Redux 提供了一个 combineReducers 函数

9
00:00:22,820 --> 00:00:26,070
来让你不用自己从头写这段代码

10
00:00:26,120 --> 00:00:30,270
combineReducers 函数会帮你生成这个最高阶的 reducer

11
00:00:30,970 --> 00:00:34,400
combineRecuers 函数的唯一参数是一个对象

12
00:00:34,520 --> 00:00:37,450
这个对象让我可以声明

13
00:00:37,450 --> 00:00:39,450
状态对象的字段的名称

14
00:00:39,450 --> 00:00:41,650
以及对应的管理该字段的 reducer 之间的映射关系

15
00:00:42,350 --> 00:00:47,070
combineReducers 函数的返回值是一个 reducer 函数

16
00:00:47,070 --> 00:00:52,420
它基本上等价于我之前手写的 reducer 函数

17
00:00:53,620 --> 00:00:57,800
我传递给 combineReducers 的对象的键

18
00:00:57,970 --> 00:01:02,400
对应了它所返回的 reducer 所要管理的状态对象的字段

19
00:01:04,170 --> 00:01:07,800
我传递给 combineReducers 的对象的值

20
00:01:07,900 --> 00:01:12,970
就是更新对应的状态字段时所需要调用的 reducer

21
00:01:14,070 --> 00:01:16,500
这个 combineReducers 函数调用的意思是

22
00:01:16,500 --> 00:01:22,250
状态对象的 todos 属性会被 todos 这个 reducer 更新

23
00:01:22,350 --> 00:01:25,570
而状态对象的 visibilityFilter 属性

24
00:01:25,570 --> 00:01:29,570
会被 visibilityFilter 这个 reducer 更新

25
00:01:29,670 --> 00:01:33,220
然后这些更新的结果会被合并到一个单一的对象里

26
00:01:34,050 --> 00:01:38,950
换句话说 它的行为基本上就像下面注释里所写的一样

27
00:01:41,020 --> 00:01:43,920
最后 我要提出一个非常有用的约定

28
00:01:44,470 --> 00:01:46,720
在任何情况下 我都会以 reducer 所要管理的状态对象的键

29
00:01:46,720 --> 00:01:48,820
来命名我的 reducer

30
00:01:49,570 --> 00:01:53,000
这样 归功于 ES6 的对象属性的简洁表示法

31
00:01:53,000 --> 00:01:54,670
我就可以忽略掉值

32
00:01:54,720 --> 00:01:58,650
因为键和值的名字都是相同的

33
00:02:00,200 --> 00:02:01,070
在本课中

34
00:02:01,070 --> 00:02:04,150
你学习了如何使用 combineReducers 工具函数

35
00:02:04,150 --> 00:02:06,050
来生成一个简单的 reducer

36
00:02:06,050 --> 00:02:11,620
这个 reducer 会调用多个 reducer 来分别管理状态树的某个部分

