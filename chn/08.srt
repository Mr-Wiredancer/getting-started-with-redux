1
00:00:00,320 --> 00:00:02,340
在这个最简单的计数器例子中

2
00:00:02,340 --> 00:00:04,720
每当 store 的状态改变时

3
00:00:04,720 --> 00:00:07,020
我会手动更新 document.body

4
00:00:07,160 --> 00:00:11,440
但是 这种方法当然不能扩展到复杂的应用中

5
00:00:11,580 --> 00:00:14,340
所以我准备使用 React

6
00:00:14,340 --> 00:00:16,340
而不是手动更新 DOM

7
00:00:16,960 --> 00:00:18,920
我添加了两个 script 标签

8
00:00:18,920 --> 00:00:21,660
分别对应 react 和 react-dom 这两个包

9
00:00:21,660 --> 00:00:23,760
我还添加了一个 id 为 "root" 的 div 标签 用来渲染 React 部件

10
00:00:23,860 --> 00:00:28,180
现在我就可以用我的根部件来调用 ReactDOM.render() 了

11
00:00:29,100 --> 00:00:33,040
render() 函数在每一次 store 的状态改变时都会被调用

12
00:00:33,160 --> 00:00:36,380
所以我可以放心地将 store 的当前状态

13
00:00:36,380 --> 00:00:38,580
以属性的形式传递给根部件

14
00:00:39,340 --> 00:00:42,520
因为这个状态储存在 Redux store 里面

15
00:00:42,620 --> 00:00:45,860
所以 counter 部件可以是一个简单的函数

16
00:00:46,000 --> 00:00:50,400
这是从 React 14 开始就支持的一种声明部件的方式

17
00:00:51,400 --> 00:00:56,000
现在我想在部件里加上 + 和 - 按钮

18
00:00:56,000 --> 00:01:00,660
但我不想把 Redux 依赖写死在部件里

19
00:01:00,860 --> 00:01:05,900
所以我添加了 onIncrement 和 onDecrement 属性作为回调函数

20
00:01:06,120 --> 00:01:07,960
然后在我的 render() 方法里

21
00:01:08,100 --> 00:01:09,940
我把回调函数传了进去

22
00:01:09,940 --> 00:01:14,320
这些回调函数会用合适的动作来调用 store.dispatch()

23
00:01:16,160 --> 00:01:20,360
现在 当我点击按钮时 应用的状态就会被更新

24
00:01:21,160 --> 00:01:24,200
让我们来回顾一下应用的整个工作原理

25
00:01:25,080 --> 00:01:28,360
我把 counter 部件叫作展示(笨拙)部件

26
00:01:28,560 --> 00:01:31,020
它不包含任何的业务逻辑

27
00:01:31,260 --> 00:01:37,560
它只说明了当前的应用状态是如何转化成可渲染的输出

28
00:01:37,880 --> 00:01:43,880
还有通过属性传递进来的回调函数如何绑定到事件处理器上

29
00:01:44,860 --> 00:01:46,680
当我们渲染一个计数器时

30
00:01:46,820 --> 00:01:51,440
我们指定了它的值应该来自于 Redux store 的当前状态

31
00:01:51,780 --> 00:01:55,200
而当用户按下 + 或者 - 时

32
00:01:55,200 --> 00:01:58,640
我们会分发相应的动作到 Redux store

33
00:01:59,360 --> 00:02:05,240
我们的 reducer 则指定了如何基于当前状态

34
00:02:05,240 --> 00:02:07,240
和被分发的动作 计算出下一个状态

35
00:02:07,460 --> 00:02:10,400
最后 我们订阅到 Redux store

36
00:02:10,480 --> 00:02:15,040
这样我们的 render() 函数就可以在每次状态变化时运行

37
00:02:15,040 --> 00:02:17,780
让计数器获取到它的当前状态

