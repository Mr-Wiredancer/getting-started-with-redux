1
00:00:00,170 --> 00:00:01,050
在本次课程中

2
00:00:01,050 --> 00:00:05,700
我们将会继续给我们的 Todo List 应用完善 reducer

3
00:00:06,000 --> 00:00:10,850
当前的 reducer 能处理的 action 只有 ADD_TODO

4
00:00:11,520 --> 00:00:14,770
我们也添加了相应的测试来确保

5
00:00:14,770 --> 00:00:19,770
当传入参数 state 为空数组以及 action 为 ADD_TODO 的 reducer 被调用时

6
00:00:19,850 --> 00:00:23,520
它返回一个只包含一个 Todo 的数组

7
00:00:25,070 --> 00:00:25,950
在本次课程中

8
00:00:25,950 --> 00:00:29,950
我们将遵循同样的方法来实现一个新的 action --

9
00:00:29,950 --> 00:00:31,700
TOGGLE_TODO

10
00:00:32,870 --> 00:00:35,650
我们同样从测试开始

11
00:00:36,000 --> 00:00:41,100
这一次将测试新的 action 及新的初始 state

12
00:00:42,070 --> 00:00:44,570
在调用 reducer 之前

13
00:00:44,670 --> 00:00:49,020
state 包含了两个不同的 todo ， id 分别是 0 和 1

14
00:00:49,850 --> 00:00:54,250
注意设置这两个 todo 的 completed 字段为 false

15
00:00:55,000 --> 00:00:57,000
接着 我声明了一个 action 对象

16
00:00:57,020 --> 00:01:02,500
这个对象的 type 属性是字符串 "TOGGLE_TODO"

17
00:01:02,700 --> 00:01:06,150
而它的 id 属性则是我所想要完成/撤销的 todo 的 id

18
00:01:06,950 --> 00:01:11,600
然后我声明了调用 reducer 之后期待返回的 state

19
00:01:11,950 --> 00:01:15,820
它和我们调用的 reducer 之前 state 的长得基本一样

20
00:01:16,050 --> 00:01:21,150
但是我们要把 action 指定 id 的 todo

21
00:01:21,150 --> 00:01:23,120
也就是 id 为 1 的 todo

22
00:01:23,120 --> 00:01:25,450
修改其 completed 为 true

23
00:01:25,900 --> 00:01:28,400
reducer 一定要是纯函数

24
00:01:28,400 --> 00:01:30,420
所以作为一种预防措施

25
00:01:30,420 --> 00:01:33,570
我调用了 deepFreeze() 来确保 state 和 action 不被修改

26
00:01:34,220 --> 00:01:36,870
最后 和上节课一样

27
00:01:36,870 --> 00:01:46,550
我断言 reducer 在接收 stateBefore 和 action 之后的运行结果等于 stateAfter

28
00:01:47,270 --> 00:01:48,950
现在我的测试是一个函数

29
00:01:48,950 --> 00:01:51,550
所以我需要在文件的最后调用一下

30
00:01:51,750 --> 00:01:53,070
然后运行测试

31
00:01:53,070 --> 00:01:54,150
噢它失败了

32
00:01:54,150 --> 00:01:57,320
那是因为我还没有在 reducer 中处理相应的 action

33
00:01:58,650 --> 00:02:01,720
我现在添加一个新的 switch 条件到 reducer 中

34
00:02:02,000 --> 00:02:05,570
这时我想起来我不应该去修改原有的数组

35
00:02:05,670 --> 00:02:09,550
所以我用数组的 map() 函数来创建一个新的数组

36
00:02:10,220 --> 00:02:14,370
我传入 map() 的函数会被每个 todo 所调用

37
00:02:14,720 --> 00:02:17,150
因此要是当前的 todo 不是我 action 中指定的 todo

38
00:02:17,150 --> 00:02:18,470
我不想要修改它

39
00:02:18,470 --> 00:02:20,570
所以直接返回

40
00:02:20,820 --> 00:02:24,170
要是当前的 todo 就是我想要切换的那个

41
00:02:24,420 --> 00:02:26,800
我将返回一个新的 todo 对象

42
00:02:26,800 --> 00:02:33,100
它将包含所有原 todo 的属性（感谢对象展开运算符）

43
00:02:33,100 --> 00:02:37,250
但 completed 字段的值将取反运算

44
00:02:38,620 --> 00:02:41,550
现在我们所有的测试都通过了

45
00:02:41,570 --> 00:02:47,150
并且我们实现了一个能够添加和切换 todo 的 reducer 

