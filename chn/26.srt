1
00:00:00,140 --> 00:00:01,460
在前面的课程中

2
00:00:01,460 --> 00:00:04,040
我们通过使用 React 高级的 context 特性

3
00:00:04,040 --> 00:00:07,380
实现了 Provider 组件

4
00:00:07,380 --> 00:00:12,800
使属性中的 store 对我们应用中的每一个组件都有效

5
00:00:13,080 --> 00:00:15,500
所以如果我们通过 Provider 传递它

6
00:00:15,500 --> 00:00:18,780
我们就可以在其它任意的组件中通过 context 读取它

7
00:00:18,860 --> 00:00:22,360
这对于容器组件来说真的很方便

8
00:00:22,660 --> 00:00:24,680
实际上   由于如此方便

9
00:00:24,680 --> 00:00:27,900
我们不需要真的自己去写 Provider

10
00:00:28,400 --> 00:00:33,060
因为它已经包括在一个特别的 react-redux 库中了

11
00:00:33,700 --> 00:00:38,260
而且注意这和 Redux 不同  这是一个不同的库

12
00:00:38,540 --> 00:00:42,140
这些是把 React 绑定到 Redux 的库

13
00:00:43,380 --> 00:00:46,920
你可以通过解构在 JSBin 中的

14
00:00:46,920 --> 00:00:49,580
 ReactRedux 全局对象来导入 Provider

15
00:00:49,740 --> 00:00:53,440
或者如果你使用 Babel 和 NPM 之类 (的工具)

16
00:00:53,440 --> 00:00:56,000
你可以用大括号导入 Provider

17
00:00:56,000 --> 00:00:59,800
因为它是一个来自 react-redux 包的命名导出

18
00:01:00,000 --> 00:01:02,480
或者如果你写 ES5 代码

19
00:01:02,480 --> 00:01:03,240
你可以写成

20
00:01:03,240 --> 00:01:06,700
var Provider = require('react-redux').Provider

21
00:01:06,700 --> 00:01:10,180
或者 "var Provider = ReactRedux.Provider"

22
00:01:11,360 --> 00:01:13,780
正如我们之前所写的 Provider 那样

23
00:01:13,780 --> 00:01:17,920
来自 react-redux 的 Provider 也暴露

24
00:01:17,920 --> 00:01:20,660
传递到 context 上的 store 属性

25
00:01:20,660 --> 00:01:23,900
所以组件可以指定 context 类型

26
00:01:23,900 --> 00:01:25,900
然后使用这个 context 的 store

27
00:01:25,900 --> 00:01:29,740
来订阅 store 的更新和分送动作

