1
00:00:00,160 --> 00:00:01,960
在前面几节课中

2
00:00:01,960 --> 00:00:07,300
我们使用 React 和 Redux 创建了简单的 todo list 应用

3
00:00:07,300 --> 00:00:10,580
我们可以添加新的 todo    改变已有 todo 的状态为完成

4
00:00:10,580 --> 00:00:12,920
以及过滤当前可见 todo 项目

5
00:00:13,120 --> 00:00:16,780
我们通过一个 TodoApp 的部件来实现上述的这些功能

6
00:00:16,820 --> 00:00:20,300
这个部件有一个输入框  一个添加待办事项的按钮

7
00:00:20,460 --> 00:00:24,040
带有点击处理器的当前可见 todo 列表

8
00:00:24,200 --> 00:00:29,640
以及三个用于改变当前可见的 todo 的链接

9
00:00:30,120 --> 00:00:32,940
到目前为止   这种单一部件的方式都还不错

10
00:00:33,020 --> 00:00:36,100
但是  我们想让这个应用由多个部件组成

11
00:00:36,100 --> 00:00:40,500
这些部件能够被其他人独立地使用、测试以及修改

12
00:00:40,500 --> 00:00:44,500
所以这节课   我们会来重构我们的应用

13
00:00:45,040 --> 00:00:51,020
第一个我想从 TodoApp 部件中提取出来的是 Todo 部件

14
00:00:51,020 --> 00:00:53,360
它用于渲染 todo 列表项

15
00:00:55,880 --> 00:01:00,960
利用 React 14 的特性   我现在将 Todo 部件声明为一个函数

16
00:01:01,220 --> 00:01:05,060
我不太清楚我会需要哪些属性   所以我会先空着

17
00:01:05,060 --> 00:01:08,380
然后我会将列表项的代码复制过来

18
00:01:10,740 --> 00:01:14,280
我首先要做的事情是移除 key 属性

19
00:01:14,280 --> 00:01:17,200
因为它只在我遍历一个数组的时候才会用到

20
00:01:17,200 --> 00:01:20,700
我会在之后遍历很多 todo 的时候再使用它

21
00:01:21,540 --> 00:01:23,840
重构这些代码的目标之一

22
00:01:23,840 --> 00:01:28,100
是要让每个部件都既灵活又合理

23
00:01:28,820 --> 00:01:31,780
目前  我把点击一个 todo 触发 "TOGGLE_TODO" 动作的逻辑

24
00:01:31,780 --> 00:01:34,540
写死在部件里了

25
00:01:34,540 --> 00:01:36,940
在你的应用中你也完全可以这样做

26
00:01:36,940 --> 00:01:40,260
然而  我希望有一些部件

27
00:01:40,260 --> 00:01:42,820
它们不指明任何行为

28
00:01:42,820 --> 00:01:47,120
而只关心内容如何展示或者如何被渲染

29
00:01:47,120 --> 00:01:50,880
我将这种部件称作展示部件

30
00:01:52,100 --> 00:01:55,120
我想把 Todo 变成一个展示部件

31
00:01:55,120 --> 00:01:57,480
所以我将 onClick 处理器移除了

32
00:01:57,480 --> 00:01:59,420
然后将其变为部件了一个属性

33
00:01:59,520 --> 00:02:04,380
这样任何使用 Todo 部件的人都可以指明部件被点击后的逻辑

34
00:02:04,680 --> 00:02:07,140
你并不一定要在你的 Redux 应用中这样做

35
00:02:07,140 --> 00:02:09,940
但我认为它是一种很方便的模式

36
00:02:10,580 --> 00:02:15,140
最后  我倾向于将部件渲染所需要的数据明确表示出来

37
00:02:15,240 --> 00:02:18,140
虽然这并没有什么区别

38
00:02:18,340 --> 00:02:21,900
所以我将 completed 和 text 字段以属性的方式传递给部件

39
00:02:22,000 --> 00:02:25,120
而不是传递一个 todo 对象

40
00:02:25,560 --> 00:02:29,960
注意我们是如何将 Todo 部件变成一个纯展示部件的

41
00:02:30,100 --> 00:02:35,120
它并没有指明任何行为   但它知道如何渲染 "ADD_TODO"

42
00:02:36,800 --> 00:02:39,980
下一个我要创建的部件叫做 TodoList

43
00:02:39,980 --> 00:02:42,940
它也是一个展示部件

44
00:02:42,940 --> 00:02:45,620
它只关心内容的呈现方式

45
00:02:45,740 --> 00:02:48,420
它会接受一个 todo 的数组

46
00:02:48,420 --> 00:02:54,780
然后它会调用 todos.map() 函数来渲染一个无序的 todo 列表

47
00:02:54,940 --> 00:02:58,800
以及为每一个 todo 渲染一个 Todo 部件

48
00:02:59,620 --> 00:03:04,120
它让 React 使用 todo 的 ID 作为元素的唯一键

49
00:03:04,280 --> 00:03:07,040
然后它对 todo 对象使用了展开运算符

50
00:03:07,040 --> 00:03:12,140
这样 text 和 completed 就会作为属性传递给 Todo 部件

51
00:03:12,860 --> 00:03:16,240
现在我需要定义如何处理对一个 todo 的点击

52
00:03:16,240 --> 00:03:18,580
我可以分发一个动作

53
00:03:18,580 --> 00:03:20,120
这当然是可行的

54
00:03:20,120 --> 00:03:23,200
但是我希望它是一个展示部件

55
00:03:23,200 --> 00:03:27,140
所以我调用了另一个函数 onTodoClick()

56
00:03:27,260 --> 00:03:29,520
然后将 todo 的 ID 传递给它

57
00:03:29,520 --> 00:03:31,940
然后让它决定要怎么处理

58
00:03:32,080 --> 00:03:35,900
所以 onTodoClick 成为了 TodoList 部件的另一个属性

59
00:03:36,780 --> 00:03:40,380
Todo 和 TodoList 都是展示部件

60
00:03:40,380 --> 00:03:43,860
所以需要我称之为容器部件的部件

61
00:03:43,860 --> 00:03:48,360
来为展示部件定义行为以及提供从 store 传递来的数据

62
00:03:48,880 --> 00:03:49,720
在这个例子中

63
00:03:49,720 --> 00:03:54,200
最高层的 TodoAppComponent 就是一个容器部件

64
00:03:54,320 --> 00:03:58,480
在后面的课程中我们会看到更多的容器部件

65
00:03:58,980 --> 00:03:59,740
在这个例子中

66
00:03:59,760 --> 00:04:03,260
TodoAppComponent 使用 todos 和 一个回调函数渲染 TodoList

67
00:04:03,260 --> 00:04:05,260
这个 todos 是当前可见的 todo 事项

68
00:04:05,260 --> 00:04:10,120
回调函数定义了   当 onTodoClick() 被以一个 todo ID 调用时

69
00:04:10,120 --> 00:04:12,860
我们应该分发一个动作给 store

70
00:04:12,860 --> 00:04:14,440
这个动作的类型是 "TOGGLE_TODO"

71
00:04:14,480 --> 00:04:16,300
它的 ID 就是 todo 的 ID

72
00:04:16,920 --> 00:04:19,180
让我们再回顾一下这些是如何工作的

73
00:04:19,560 --> 00:04:22,060
TodoApp 部件渲染了一个 TodoList

74
00:04:22,060 --> 00:04:25,500
而且传递给它了一个可以分发状态的函数

75
00:04:26,700 --> 00:04:29,700
TodoList 部件渲染了 Todo 部件

76
00:04:29,920 --> 00:04:33,260
而且传递了一个属性 onClick  它会调用 onTodoClick()

77
00:04:34,680 --> 00:04:38,480
Todo 部件只是使用了它接收到的 onClick 属性

78
00:04:38,480 --> 00:04:41,440
并将它绑定到 todo 列表项的 onClick 上

79
00:04:42,020 --> 00:04:45,420
这样  当 onClick 被调用时  onTodoClick() 会被调用

80
00:04:45,580 --> 00:04:47,920
它会分发一个动作

81
00:04:47,920 --> 00:04:49,880
由于动作会更新 store

82
00:04:49,880 --> 00:04:52,220
所以这样就会更新可见 todos 

