1
00:00:00,620 --> 00:00:02,420
Redux 的第一原则就是，

2
00:00:02,420 --> 00:00:06,850
无论你的应用是像这个计数器一样的简单示例，

3
00:00:07,000 --> 00:00:11,000
还是拥有超多 UI 和状态转换的复杂应用，

4
00:00:11,000 --> 00:00:13,820
你需要用一个单一的 JavaScript 对象

5
00:00:13,820 --> 00:00:16,780
来代表你整个应用的状态。

6
00:00:17,940 --> 00:00:22,680
在 Redux 中，所有的变化和状态转换都是显式的。

7
00:00:22,970 --> 00:00:26,340
所以，你可以跟踪所有的这些变化。

8
00:00:26,480 --> 00:00:30,480
在这个例子中，我将应用的每一个状态变化

9
00:00:30,480 --> 00:00:31,880
打印到控制台里。

10
00:00:32,500 --> 00:00:35,680
你可以看到，在我们的计数器示例中，

11
00:00:35,720 --> 00:00:38,520
并没有太多的状态需要我们去维护，

12
00:00:38,680 --> 00:00:42,650
用一个 JavaScript 数值就可以代表整个应用的状态了。

13
00:00:43,450 --> 00:00:45,260
这是另一个例子，

14
00:00:45,380 --> 00:00:47,420
这里有一堆独立的计数器，

15
00:00:47,420 --> 00:00:49,040
而我可以随意添加和移除。

16
00:00:49,740 --> 00:00:51,520
在这个例子里，一个单一的数值

17
00:00:51,520 --> 00:00:54,500
并不足以代表整个应用的状态，

18
00:00:54,700 --> 00:00:57,940
所以我们用了一个 JavaScript 数组。

19
00:00:59,370 --> 00:01:01,380
在一个更复杂的应用中，

20
00:01:01,380 --> 00:01:03,320
会有更多的需要维护的状态。

21
00:01:03,680 --> 00:01:05,360
这是一个典型的待办事项应用，

22
00:01:05,360 --> 00:01:06,880
我可以在其中添加待办事项，

23
00:01:07,110 --> 00:01:09,340
可以把它划掉来标记成已完成，

24
00:01:09,340 --> 00:01:11,760
还可以改变当前的过滤器。

25
00:01:13,600 --> 00:01:16,500
看一下状态转换的历史纪录，

26
00:01:16,600 --> 00:01:20,580
我们可以看到应用的初始状态是一个 JavaScript 对象，

27
00:01:20,720 --> 00:01:24,280
这个对象的“todos”属性下是一个数组，

28
00:01:24,280 --> 00:01:28,100
而“visibilityFilter”属性则是一个字符串“SHOW_ALL”。

29
00:01:28,200 --> 00:01:30,440
当我添加第一个待办事项时，

30
00:01:30,440 --> 00:01:34,880
它被添加到“状态”对象里的“todos”数组。

31
00:01:35,080 --> 00:01:37,120
而这个待办事项本身，

32
00:01:37,120 --> 00:01:39,700
则是由一个普通的 JavaScript 对象所代表，

33
00:01:39,720 --> 00:01:43,060
这里它被标记为未完成，而它的内容则已经被保存。

34
00:01:43,220 --> 00:01:45,940
这个应用之后的每个变化，

35
00:01:45,940 --> 00:01:48,620
无论是我划掉一个待办事项，

36
00:01:48,760 --> 00:01:51,240
还是我改变“visibilityFilter”，

37
00:01:51,340 --> 00:01:55,080
都会让“状态”对象发生改变，

38
00:01:55,080 --> 00:01:57,600
而这个对象代表了我们的整个应用。

39
00:01:58,280 --> 00:02:00,800
现在你已经了解了 Redux 的第一原则，

40
00:02:00,900 --> 00:02:04,220
那就是，所有在应用中的改变，

41
00:02:04,250 --> 00:02:06,660
包括数据和 UI 状态，

42
00:02:06,660 --> 00:02:08,900
都包含在一个单一的对象里，

43
00:02:08,900 --> 00:02:11,320
我们把它称为“状态”或者“状态树”

